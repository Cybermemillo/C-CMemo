{
    "sourceFile": "src/bbdd/init_db.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1740264947365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740304129801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,13 +22,13 @@\n             CREATE TABLE IF NOT EXISTS bots (\r\n                 id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                 unique_id TEXT UNIQUE,\r\n                 ip_address TEXT,\r\n-                system_info TEXT,\r\n-                first_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n-                last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n+                system_os TEXT,\r\n+                hostname TEXT,\r\n+                last_seen TIMESTAMP,\r\n                 is_active BOOLEAN DEFAULT 1,\r\n-                metadata TEXT\r\n+                additional_info TEXT\r\n             )''')\r\n             \r\n             cursor.execute('CREATE INDEX IF NOT EXISTS idx_bots_unique_id ON bots(unique_id)')\r\n             conn.commit()\r\n@@ -36,31 +36,20 @@\n         # Base de datos de comandos\r\n         with sqlite3.connect(db_dir / \"commands.db\") as conn:\r\n             cursor = conn.cursor()\r\n             cursor.execute('''\r\n-            CREATE TABLE IF NOT EXISTS command_history (\r\n+            CREATE TABLE IF NOT EXISTS commands (\r\n                 id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                 bot_id INTEGER,\r\n                 command TEXT,\r\n-                command_type TEXT,\r\n-                arguments JSON,\r\n-                timestamp TIMESTAMP,\r\n-                execution_time FLOAT,\r\n-                success BOOLEAN,\r\n-                result TEXT,\r\n-                error_message TEXT,\r\n-                hash TEXT\r\n+                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n+                executed BOOLEAN DEFAULT 0,\r\n+                response TEXT,\r\n+                FOREIGN KEY (bot_id) REFERENCES bots (id)\r\n             )''')\r\n             \r\n-            cursor.execute('''\r\n-            CREATE TABLE IF NOT EXISTS command_tags (\r\n-                command_id INTEGER,\r\n-                tag TEXT,\r\n-                FOREIGN KEY (command_id) REFERENCES command_history(id)\r\n-            )''')\r\n-            \r\n-            cursor.execute('CREATE INDEX IF NOT EXISTS idx_command_history_bot_id ON command_history(bot_id)')\r\n-            cursor.execute('CREATE INDEX IF NOT EXISTS idx_command_history_timestamp ON command_history(timestamp)')\r\n+            cursor.execute('CREATE INDEX IF NOT EXISTS idx_commands_bot_id ON commands(bot_id)')\r\n+            cursor.execute('CREATE INDEX IF NOT EXISTS idx_commands_executed ON commands(executed)')\r\n             conn.commit()\r\n \r\n         # Base de datos de estadísticas\r\n         with sqlite3.connect(db_dir / \"stats.db\") as conn:\r\n"
                },
                {
                    "date": 1740304384159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,90 +1,82 @@\n \"\"\"\r\n Script de inicialización de bases de datos.\r\n-Este script crea todas las bases de datos necesarias en el directorio bbdd.\r\n \"\"\"\r\n \r\n import sqlite3\r\n import os\r\n import logging\r\n from pathlib import Path\r\n \r\n-def init_databases():\r\n-    \"\"\"Inicializa todas las bases de datos necesarias.\"\"\"\r\n+def init_databases(db_path: str = None):\r\n+    \"\"\"\r\n+    Inicializa la base de datos con las tablas necesarias.\r\n+    \r\n+    Args:\r\n+        db_path: Ruta de la base de datos. Si es None, se usa la ubicación predeterminada.\r\n+    \"\"\"\r\n     try:\r\n+        if db_path is None:\r\n+            db_dir = Path(__file__).parent\r\n+            db_path = str(db_dir / \"bots.db\")\r\n+        \r\n         # Asegurar que el directorio existe\r\n-        db_dir = Path(__file__).parent\r\n-        db_dir.mkdir(parents=True, exist_ok=True)\r\n+        os.makedirs(os.path.dirname(db_path), exist_ok=True)\r\n         \r\n-        # Base de datos de bots\r\n-        with sqlite3.connect(db_dir / \"bots.db\") as conn:\r\n+        with sqlite3.connect(db_path) as conn:\r\n             cursor = conn.cursor()\r\n+            \r\n+            # Tabla de bots\r\n             cursor.execute('''\r\n             CREATE TABLE IF NOT EXISTS bots (\r\n                 id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                 unique_id TEXT UNIQUE,\r\n                 ip_address TEXT,\r\n-                system_os TEXT,\r\n-                hostname TEXT,\r\n-                last_seen TIMESTAMP,\r\n+                system_info TEXT,\r\n+                first_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n+                last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n                 is_active BOOLEAN DEFAULT 1,\r\n-                additional_info TEXT\r\n+                metadata TEXT\r\n             )''')\r\n             \r\n-            cursor.execute('CREATE INDEX IF NOT EXISTS idx_bots_unique_id ON bots(unique_id)')\r\n-            conn.commit()\r\n-\r\n-        # Base de datos de comandos\r\n-        with sqlite3.connect(db_dir / \"commands.db\") as conn:\r\n-            cursor = conn.cursor()\r\n+            # Tabla de comandos\r\n             cursor.execute('''\r\n             CREATE TABLE IF NOT EXISTS commands (\r\n                 id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                 bot_id INTEGER,\r\n                 command TEXT,\r\n+                response TEXT,\r\n                 timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n                 executed BOOLEAN DEFAULT 0,\r\n-                response TEXT,\r\n-                FOREIGN KEY (bot_id) REFERENCES bots (id)\r\n+                success BOOLEAN,\r\n+                FOREIGN KEY (bot_id) REFERENCES bots(id)\r\n             )''')\r\n             \r\n-            cursor.execute('CREATE INDEX IF NOT EXISTS idx_commands_bot_id ON commands(bot_id)')\r\n-            cursor.execute('CREATE INDEX IF NOT EXISTS idx_commands_executed ON commands(executed)')\r\n-            conn.commit()\r\n-\r\n-        # Base de datos de estadísticas\r\n-        with sqlite3.connect(db_dir / \"stats.db\") as conn:\r\n-            cursor = conn.cursor()\r\n+            # Tabla de estadísticas\r\n             cursor.execute('''\r\n-            CREATE TABLE IF NOT EXISTS system_stats (\r\n+            CREATE TABLE IF NOT EXISTS stats (\r\n                 id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n-                timestamp TIMESTAMP,\r\n-                cpu_usage FLOAT,\r\n-                mem_usage FLOAT,\r\n-                disk_usage FLOAT,\r\n-                active_bots INTEGER,\r\n-                data_transferred BIGINT\r\n-            )''')\r\n-            \r\n-            cursor.execute('''\r\n-            CREATE TABLE IF NOT EXISTS alerts (\r\n-                id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n+                bot_id INTEGER,\r\n                 type TEXT,\r\n-                timestamp TIMESTAMP,\r\n-                details JSON,\r\n-                server_stats JSON,\r\n-                acknowledged BOOLEAN DEFAULT 0\r\n+                value TEXT,\r\n+                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n+                FOREIGN KEY (bot_id) REFERENCES bots(id)\r\n             )''')\r\n             \r\n-            cursor.execute('CREATE INDEX IF NOT EXISTS idx_system_stats_timestamp ON system_stats(timestamp)')\r\n-            cursor.execute('CREATE INDEX IF NOT EXISTS idx_alerts_type ON alerts(type)')\r\n+            # Crear índices\r\n+            cursor.execute('CREATE INDEX IF NOT EXISTS idx_bots_unique_id ON bots(unique_id)')\r\n+            cursor.execute('CREATE INDEX IF NOT EXISTS idx_commands_bot_id ON commands(bot_id)')\r\n+            cursor.execute('CREATE INDEX IF NOT EXISTS idx_commands_executed ON commands(executed)')\r\n+            cursor.execute('CREATE INDEX IF NOT EXISTS idx_stats_bot_id ON stats(bot_id)')\r\n+            \r\n             conn.commit()\r\n-\r\n-        print(\"[+] Bases de datos inicializadas correctamente\")\r\n+            \r\n+        print(f\"[+] Base de datos inicializada en: {db_path}\")\r\n         return True\r\n-\r\n+    \r\n     except Exception as e:\r\n-        print(f\"[-] Error inicializando bases de datos: {e}\")\r\n+        print(f\"[-] Error inicializando base de datos: {e}\")\r\n+        logging.error(f\"Error inicializando base de datos: {e}\")\r\n         return False\r\n \r\n if __name__ == \"__main__\":\r\n     init_databases()\r\n"
                }
            ],
            "date": 1740264947365,
            "name": "Commit-0",
            "content": "\"\"\"\r\nScript de inicialización de bases de datos.\r\nEste script crea todas las bases de datos necesarias en el directorio bbdd.\r\n\"\"\"\r\n\r\nimport sqlite3\r\nimport os\r\nimport logging\r\nfrom pathlib import Path\r\n\r\ndef init_databases():\r\n    \"\"\"Inicializa todas las bases de datos necesarias.\"\"\"\r\n    try:\r\n        # Asegurar que el directorio existe\r\n        db_dir = Path(__file__).parent\r\n        db_dir.mkdir(parents=True, exist_ok=True)\r\n        \r\n        # Base de datos de bots\r\n        with sqlite3.connect(db_dir / \"bots.db\") as conn:\r\n            cursor = conn.cursor()\r\n            cursor.execute('''\r\n            CREATE TABLE IF NOT EXISTS bots (\r\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                unique_id TEXT UNIQUE,\r\n                ip_address TEXT,\r\n                system_info TEXT,\r\n                first_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n                last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n                is_active BOOLEAN DEFAULT 1,\r\n                metadata TEXT\r\n            )''')\r\n            \r\n            cursor.execute('CREATE INDEX IF NOT EXISTS idx_bots_unique_id ON bots(unique_id)')\r\n            conn.commit()\r\n\r\n        # Base de datos de comandos\r\n        with sqlite3.connect(db_dir / \"commands.db\") as conn:\r\n            cursor = conn.cursor()\r\n            cursor.execute('''\r\n            CREATE TABLE IF NOT EXISTS command_history (\r\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                bot_id INTEGER,\r\n                command TEXT,\r\n                command_type TEXT,\r\n                arguments JSON,\r\n                timestamp TIMESTAMP,\r\n                execution_time FLOAT,\r\n                success BOOLEAN,\r\n                result TEXT,\r\n                error_message TEXT,\r\n                hash TEXT\r\n            )''')\r\n            \r\n            cursor.execute('''\r\n            CREATE TABLE IF NOT EXISTS command_tags (\r\n                command_id INTEGER,\r\n                tag TEXT,\r\n                FOREIGN KEY (command_id) REFERENCES command_history(id)\r\n            )''')\r\n            \r\n            cursor.execute('CREATE INDEX IF NOT EXISTS idx_command_history_bot_id ON command_history(bot_id)')\r\n            cursor.execute('CREATE INDEX IF NOT EXISTS idx_command_history_timestamp ON command_history(timestamp)')\r\n            conn.commit()\r\n\r\n        # Base de datos de estadísticas\r\n        with sqlite3.connect(db_dir / \"stats.db\") as conn:\r\n            cursor = conn.cursor()\r\n            cursor.execute('''\r\n            CREATE TABLE IF NOT EXISTS system_stats (\r\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                timestamp TIMESTAMP,\r\n                cpu_usage FLOAT,\r\n                mem_usage FLOAT,\r\n                disk_usage FLOAT,\r\n                active_bots INTEGER,\r\n                data_transferred BIGINT\r\n            )''')\r\n            \r\n            cursor.execute('''\r\n            CREATE TABLE IF NOT EXISTS alerts (\r\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n                type TEXT,\r\n                timestamp TIMESTAMP,\r\n                details JSON,\r\n                server_stats JSON,\r\n                acknowledged BOOLEAN DEFAULT 0\r\n            )''')\r\n            \r\n            cursor.execute('CREATE INDEX IF NOT EXISTS idx_system_stats_timestamp ON system_stats(timestamp)')\r\n            cursor.execute('CREATE INDEX IF NOT EXISTS idx_alerts_type ON alerts(type)')\r\n            conn.commit()\r\n\r\n        print(\"[+] Bases de datos inicializadas correctamente\")\r\n        return True\r\n\r\n    except Exception as e:\r\n        print(f\"[-] Error inicializando bases de datos: {e}\")\r\n        return False\r\n\r\nif __name__ == \"__main__\":\r\n    init_databases()\r\n"
        }
    ]
}