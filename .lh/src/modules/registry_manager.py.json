{
    "sourceFile": "src/modules/registry_manager.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740261557376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740261557376,
            "name": "Commit-0",
            "content": "\"\"\"\r\nMódulo para gestionar el registro de Windows.\r\nProporciona funciones para leer, escribir y manipular el registro de Windows de forma segura.\r\n\"\"\"\r\n\r\nimport winreg\r\nimport logging\r\nimport json\r\n\r\ndef read_registry_key(hive_name, key_path, value_name=None):\r\n    \"\"\"\r\n    Lee un valor del registro de Windows.\r\n    \r\n    Args:\r\n        hive_name (str): Nombre del hive (HKEY_LOCAL_MACHINE, HKEY_CURRENT_USER, etc.)\r\n        key_path (str): Ruta de la clave\r\n        value_name (str): Nombre del valor a leer (None para valor por defecto)\r\n    \r\n    Returns:\r\n        dict: Resultado de la operación con los datos leídos\r\n    \"\"\"\r\n    hive_map = {\r\n        \"HKLM\": winreg.HKEY_LOCAL_MACHINE,\r\n        \"HKCU\": winreg.HKEY_CURRENT_USER,\r\n        \"HKU\": winreg.HKEY_USERS,\r\n        \"HKCR\": winreg.HKEY_CLASSES_ROOT,\r\n        \"HKCC\": winreg.HKEY_CURRENT_CONFIG\r\n    }\r\n    \r\n    try:\r\n        hive = hive_map.get(hive_name.upper())\r\n        if not hive:\r\n            return {\"success\": False, \"error\": f\"Hive no válido: {hive_name}\"}\r\n            \r\n        key = winreg.OpenKey(hive, key_path, 0, winreg.KEY_READ)\r\n        if value_name is None:\r\n            # Leer todos los valores\r\n            values = {}\r\n            try:\r\n                i = 0\r\n                while True:\r\n                    name, data, type = winreg.EnumValue(key, i)\r\n                    values[name] = {\"data\": data, \"type\": type}\r\n                    i += 1\r\n            except WindowsError:\r\n                pass\r\n            return {\"success\": True, \"values\": values}\r\n        else:\r\n            # Leer valor específico\r\n            data, type = winreg.QueryValueEx(key, value_name)\r\n            return {\"success\": True, \"data\": data, \"type\": type}\r\n    except Exception as e:\r\n        return {\"success\": False, \"error\": str(e)}\r\n    finally:\r\n        try:\r\n            key.Close()\r\n        except:\r\n            pass\r\n\r\ndef write_registry_key(hive_name, key_path, value_name, value_data, value_type=\"REG_SZ\"):\r\n    \"\"\"\r\n    Escribe un valor en el registro de Windows.\r\n    \r\n    Args:\r\n        hive_name (str): Nombre del hive\r\n        key_path (str): Ruta de la clave\r\n        value_name (str): Nombre del valor\r\n        value_data: Datos a escribir\r\n        value_type (str): Tipo de valor (REG_SZ, REG_DWORD, etc.)\r\n    \r\n    Returns:\r\n        dict: Resultado de la operación\r\n    \"\"\"\r\n    type_map = {\r\n        \"REG_SZ\": winreg.REG_SZ,\r\n        \"REG_DWORD\": winreg.REG_DWORD,\r\n        \"REG_BINARY\": winreg.REG_BINARY,\r\n        \"REG_MULTI_SZ\": winreg.REG_MULTI_SZ\r\n    }\r\n    \r\n    hive_map = {\r\n        \"HKLM\": winreg.HKEY_LOCAL_MACHINE,\r\n        \"HKCU\": winreg.HKEY_CURRENT_USER,\r\n        \"HKU\": winreg.HKEY_USERS,\r\n        \"HKCR\": winreg.HKEY_CLASSES_ROOT,\r\n        \"HKCC\": winreg.HKEY_CURRENT_CONFIG\r\n    }\r\n    \r\n    try:\r\n        hive = hive_map.get(hive_name.upper())\r\n        if not hive:\r\n            return {\"success\": False, \"error\": f\"Hive no válido: {hive_name}\"}\r\n            \r\n        reg_type = type_map.get(value_type.upper())\r\n        if not reg_type:\r\n            return {\"success\": False, \"error\": f\"Tipo de registro no válido: {value_type}\"}\r\n            \r\n        key = winreg.CreateKey(hive, key_path)\r\n        winreg.SetValueEx(key, value_name, 0, reg_type, value_data)\r\n        return {\"success\": True}\r\n    except Exception as e:\r\n        return {\"success\": False, \"error\": str(e)}\r\n    finally:\r\n        try:\r\n            key.Close()\r\n        except:\r\n            pass\r\n\r\ndef delete_registry_key(hive_name, key_path, value_name=None):\r\n    \"\"\"\r\n    Elimina una clave o valor del registro.\r\n    \r\n    Args:\r\n        hive_name (str): Nombre del hive\r\n        key_path (str): Ruta de la clave\r\n        value_name (str): Nombre del valor a eliminar (None para eliminar la clave completa)\r\n    \r\n    Returns:\r\n        dict: Resultado de la operación\r\n    \"\"\"\r\n    hive_map = {\r\n        \"HKLM\": winreg.HKEY_LOCAL_MACHINE,\r\n        \"HKCU\": winreg.HKEY_CURRENT_USER,\r\n        \"HKU\": winreg.HKEY_USERS,\r\n        \"HKCR\": winreg.HKEY_CLASSES_ROOT,\r\n        \"HKCC\": winreg.HKEY_CURRENT_CONFIG\r\n    }\r\n    \r\n    try:\r\n        hive = hive_map.get(hive_name.upper())\r\n        if not hive:\r\n            return {\"success\": False, \"error\": f\"Hive no válido: {hive_name}\"}\r\n            \r\n        if value_name:\r\n            # Eliminar valor específico\r\n            key = winreg.OpenKey(hive, key_path, 0, winreg.KEY_WRITE)\r\n            winreg.DeleteValue(key, value_name)\r\n        else:\r\n            # Eliminar clave completa\r\n            winreg.DeleteKey(hive, key_path)\r\n        return {\"success\": True}\r\n    except Exception as e:\r\n        return {\"success\": False, \"error\": str(e)}\r\n    finally:\r\n        try:\r\n            key.Close()\r\n        except:\r\n            pass\r\n\r\ndef enum_registry_keys(hive_name, key_path):\r\n    \"\"\"\r\n    Enumera todas las subclaves de una clave del registro.\r\n    \r\n    Args:\r\n        hive_name (str): Nombre del hive\r\n        key_path (str): Ruta de la clave\r\n    \r\n    Returns:\r\n        dict: Lista de subclaves encontradas\r\n    \"\"\"\r\n    hive_map = {\r\n        \"HKLM\": winreg.HKEY_LOCAL_MACHINE,\r\n        \"HKCU\": winreg.HKEY_CURRENT_USER,\r\n        \"HKU\": winreg.HKEY_USERS,\r\n        \"HKCR\": winreg.HKEY_CLASSES_ROOT,\r\n        \"HKCC\": winreg.HKEY_CURRENT_CONFIG\r\n    }\r\n    \r\n    try:\r\n        hive = hive_map.get(hive_name.upper())\r\n        if not hive:\r\n            return {\"success\": False, \"error\": f\"Hive no válido: {hive_name}\"}\r\n            \r\n        key = winreg.OpenKey(hive, key_path, 0, winreg.KEY_READ)\r\n        subkeys = []\r\n        try:\r\n            i = 0\r\n            while True:\r\n                subkey = winreg.EnumKey(key, i)\r\n                subkeys.append(subkey)\r\n                i += 1\r\n        except WindowsError:\r\n            pass\r\n        return {\"success\": True, \"subkeys\": subkeys}\r\n    except Exception as e:\r\n        return {\"success\": False, \"error\": str(e)}\r\n    finally:\r\n        try:\r\n            key.Close()\r\n        except:\r\n            pass\r\n"
        }
    ]
}