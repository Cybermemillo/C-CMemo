{
    "sourceFile": "src/modules/basic_commands.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1740260772215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740260881861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,108 @@\n+import subprocess\r\n+import os\r\n+import sys\r\n+import ctypes\r\n+import platform\r\n+import psutil\r\n+import winreg\r\n+import requests\r\n+import base64\r\n+from PIL import ImageGrab\r\n+import io\r\n+\r\n+def execute_system_command(command, shell=True):\r\n+    \"\"\"Ejecuta un comando del sistema y retorna su salida.\"\"\"\r\n+    try:\r\n+        result = subprocess.run(command, shell=shell, capture_output=True, text=True)\r\n+        return {\r\n+            'success': result.returncode == 0,\r\n+            'output': result.stdout,\r\n+            'error': result.stderr\r\n+        }\r\n+    except Exception as e:\r\n+        return {\r\n+            'success': False,\r\n+            'output': '',\r\n+            'error': str(e)\r\n+        }\r\n+\r\n+def get_system_info():\r\n+    \"\"\"Obtiene información detallada del sistema.\"\"\"\r\n+    try:\r\n+        info = {\r\n+            'platform': platform.system(),\r\n+            'platform_release': platform.release(),\r\n+            'platform_version': platform.version(),\r\n+            'architecture': platform.machine(),\r\n+            'hostname': platform.node(),\r\n+            'processor': platform.processor(),\r\n+            'ram': f\"{psutil.virtual_memory().total / (1024.0 ** 3):.2f} GB\",\r\n+            'username': os.getlogin(),\r\n+            'is_admin': ctypes.windll.shell32.IsUserAnAdmin() if os.name == 'nt' else os.getuid() == 0\r\n+        }\r\n+        return {'success': True, 'info': info}\r\n+    except Exception as e:\r\n+        return {'success': False, 'error': str(e)}\r\n+\r\n+def capture_screenshot():\r\n+    \"\"\"Captura la pantalla y la devuelve en base64.\"\"\"\r\n+    try:\r\n+        screenshot = ImageGrab.grab()\r\n+        img_byte_arr = io.BytesIO()\r\n+        screenshot.save(img_byte_arr, format='PNG')\r\n+        img_byte_arr = img_byte_arr.getvalue()\r\n+        return {\r\n+            'success': True,\r\n+            'image': base64.b64encode(img_byte_arr).decode()\r\n+        }\r\n+    except Exception as e:\r\n+        return {'success': False, 'error': str(e)}\r\n+\r\n+def list_processes():\r\n+    \"\"\"Lista todos los procesos en ejecución.\"\"\"\r\n+    try:\r\n+        processes = []\r\n+        for proc in psutil.process_iter(['pid', 'name', 'username', 'memory_percent']):\r\n+            processes.append(proc.info)\r\n+        return {'success': True, 'processes': processes}\r\n+    except Exception as e:\r\n+        return {'success': False, 'error': str(e)}\r\n+\r\n+def kill_process(pid):\r\n+    \"\"\"Mata un proceso por su PID.\"\"\"\r\n+    try:\r\n+        psutil.Process(pid).terminate()\r\n+        return {'success': True}\r\n+    except Exception as e:\r\n+        return {'success': False, 'error': str(e)}\r\n+\r\n+def list_network_connections():\r\n+    \"\"\"Lista todas las conexiones de red activas.\"\"\"\r\n+    try:\r\n+        connections = []\r\n+        for conn in psutil.net_connections():\r\n+            connections.append({\r\n+                'local_addr': conn.laddr,\r\n+                'remote_addr': conn.raddr,\r\n+                'status': conn.status,\r\n+                'pid': conn.pid\r\n+            })\r\n+        return {'success': True, 'connections': connections}\r\n+    except Exception as e:\r\n+        return {'success': False, 'error': str(e)}\r\n+\r\n+def modify_registry(key_path, value_name, value_data, value_type='REG_SZ'):\r\n+    \"\"\"Modifica el registro de Windows.\"\"\"\r\n+    try:\r\n+        reg_types = {\r\n+            'REG_SZ': winreg.REG_SZ,\r\n+            'REG_DWORD': winreg.REG_DWORD\r\n+        }\r\n+        \r\n+        root = winreg.HKEY_CURRENT_USER\r\n+        key = winreg.CreateKey(root, key_path)\r\n+        winreg.SetValueEx(key, value_name, 0, reg_types[value_type], value_data)\r\n+        winreg.CloseKey(key)\r\n+        return {'success': True}\r\n+    except Exception as e:\r\n+        return {'success': False, 'error': str(e)}\r\n"
                },
                {
                    "date": 1740260944679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,112 +105,4 @@\n         winreg.CloseKey(key)\r\n         return {'success': True}\r\n     except Exception as e:\r\n         return {'success': False, 'error': str(e)}\r\n-import subprocess\r\n-import os\r\n-import sys\r\n-import ctypes\r\n-import platform\r\n-import psutil\r\n-import winreg\r\n-import requests\r\n-import base64\r\n-from PIL import ImageGrab\r\n-import io\r\n-\r\n-def execute_system_command(command, shell=True):\r\n-    \"\"\"Ejecuta un comando del sistema y retorna su salida.\"\"\"\r\n-    try:\r\n-        result = subprocess.run(command, shell=shell, capture_output=True, text=True)\r\n-        return {\r\n-            'success': result.returncode == 0,\r\n-            'output': result.stdout,\r\n-            'error': result.stderr\r\n-        }\r\n-    except Exception as e:\r\n-        return {\r\n-            'success': False,\r\n-            'output': '',\r\n-            'error': str(e)\r\n-        }\r\n-\r\n-def get_system_info():\r\n-    \"\"\"Obtiene información detallada del sistema.\"\"\"\r\n-    try:\r\n-        info = {\r\n-            'platform': platform.system(),\r\n-            'platform_release': platform.release(),\r\n-            'platform_version': platform.version(),\r\n-            'architecture': platform.machine(),\r\n-            'hostname': platform.node(),\r\n-            'processor': platform.processor(),\r\n-            'ram': f\"{psutil.virtual_memory().total / (1024.0 ** 3):.2f} GB\",\r\n-            'username': os.getlogin(),\r\n-            'is_admin': ctypes.windll.shell32.IsUserAnAdmin() if os.name == 'nt' else os.getuid() == 0\r\n-        }\r\n-        return {'success': True, 'info': info}\r\n-    except Exception as e:\r\n-        return {'success': False, 'error': str(e)}\r\n-\r\n-def capture_screenshot():\r\n-    \"\"\"Captura la pantalla y la devuelve en base64.\"\"\"\r\n-    try:\r\n-        screenshot = ImageGrab.grab()\r\n-        img_byte_arr = io.BytesIO()\r\n-        screenshot.save(img_byte_arr, format='PNG')\r\n-        img_byte_arr = img_byte_arr.getvalue()\r\n-        return {\r\n-            'success': True,\r\n-            'image': base64.b64encode(img_byte_arr).decode()\r\n-        }\r\n-    except Exception as e:\r\n-        return {'success': False, 'error': str(e)}\r\n-\r\n-def list_processes():\r\n-    \"\"\"Lista todos los procesos en ejecución.\"\"\"\r\n-    try:\r\n-        processes = []\r\n-        for proc in psutil.process_iter(['pid', 'name', 'username', 'memory_percent']):\r\n-            processes.append(proc.info)\r\n-        return {'success': True, 'processes': processes}\r\n-    except Exception as e:\r\n-        return {'success': False, 'error': str(e)}\r\n-\r\n-def kill_process(pid):\r\n-    \"\"\"Mata un proceso por su PID.\"\"\"\r\n-    try:\r\n-        psutil.Process(pid).terminate()\r\n-        return {'success': True}\r\n-    except Exception as e:\r\n-        return {'success': False, 'error': str(e)}\r\n-\r\n-def list_network_connections():\r\n-    \"\"\"Lista todas las conexiones de red activas.\"\"\"\r\n-    try:\r\n-        connections = []\r\n-        for conn in psutil.net_connections():\r\n-            connections.append({\r\n-                'local_addr': conn.laddr,\r\n-                'remote_addr': conn.raddr,\r\n-                'status': conn.status,\r\n-                'pid': conn.pid\r\n-            })\r\n-        return {'success': True, 'connections': connections}\r\n-    except Exception as e:\r\n-        return {'success': False, 'error': str(e)}\r\n-\r\n-def modify_registry(key_path, value_name, value_data, value_type='REG_SZ'):\r\n-    \"\"\"Modifica el registro de Windows.\"\"\"\r\n-    try:\r\n-        reg_types = {\r\n-            'REG_SZ': winreg.REG_SZ,\r\n-            'REG_DWORD': winreg.REG_DWORD\r\n-        }\r\n-        \r\n-        root = winreg.HKEY_CURRENT_USER\r\n-        key = winreg.CreateKey(root, key_path)\r\n-        winreg.SetValueEx(key, value_name, 0, reg_types[value_type], value_data)\r\n-        winreg.CloseKey(key)\r\n-        return {'success': True}\r\n-    except Exception as e:\r\n-        return {'success': False, 'error': str(e)}\r\n"
                },
                {
                    "date": 1740261415704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,11 @@\n+\"\"\"\r\n+Módulo de comandos básicos del sistema.\r\n+Este módulo proporciona funciones fundamentales para interactuar con el sistema operativo,\r\n+incluyendo ejecución de comandos, obtención de información del sistema, capturas de pantalla,\r\n+y gestión de procesos.\r\n+\"\"\"\r\n+\r\n import subprocess\r\n import os\r\n import sys\r\n import ctypes\r\n@@ -10,9 +17,21 @@\n from PIL import ImageGrab\r\n import io\r\n \r\n def execute_system_command(command, shell=True):\r\n-    \"\"\"Ejecuta un comando del sistema y retorna su salida.\"\"\"\r\n+    \"\"\"\r\n+    Ejecuta un comando del sistema y captura su salida.\r\n+    \r\n+    Args:\r\n+        command (str): El comando a ejecutar\r\n+        shell (bool): Si se debe usar shell para ejecutar el comando\r\n+    \r\n+    Returns:\r\n+        dict: Diccionario con el resultado de la ejecución\r\n+            - success (bool): Si el comando se ejecutó correctamente\r\n+            - output (str): La salida del comando\r\n+            - error (str): Mensaje de error si ocurrió alguno\r\n+    \"\"\"\r\n     try:\r\n         result = subprocess.run(command, shell=shell, capture_output=True, text=True)\r\n         return {\r\n             'success': result.returncode == 0,\r\n@@ -26,9 +45,23 @@\n             'error': str(e)\r\n         }\r\n \r\n def get_system_info():\r\n-    \"\"\"Obtiene información detallada del sistema.\"\"\"\r\n+    \"\"\"\r\n+    Recopila información detallada del sistema operativo y hardware.\r\n+    \r\n+    Obtiene:\r\n+        - Sistema operativo y versión\r\n+        - Arquitectura del procesador\r\n+        - Nombre del host\r\n+        - Información del procesador\r\n+        - Memoria RAM total\r\n+        - Usuario actual\r\n+        - Privilegios de administrador\r\n+    \r\n+    Returns:\r\n+        dict: Información del sistema con todos los detalles recopilados\r\n+    \"\"\"\r\n     try:\r\n         info = {\r\n             'platform': platform.system(),\r\n             'platform_release': platform.release(),\r\n@@ -44,9 +77,17 @@\n     except Exception as e:\r\n         return {'success': False, 'error': str(e)}\r\n \r\n def capture_screenshot():\r\n-    \"\"\"Captura la pantalla y la devuelve en base64.\"\"\"\r\n+    \"\"\"\r\n+    Captura la pantalla y la devuelve en base64.\r\n+    \r\n+    Returns:\r\n+        dict: Diccionario con el resultado de la captura\r\n+            - success (bool): Si la captura fue exitosa\r\n+            - image (str): Imagen en base64\r\n+            - error (str): Mensaje de error si ocurrió alguno\r\n+    \"\"\"\r\n     try:\r\n         screenshot = ImageGrab.grab()\r\n         img_byte_arr = io.BytesIO()\r\n         screenshot.save(img_byte_arr, format='PNG')\r\n@@ -58,9 +99,17 @@\n     except Exception as e:\r\n         return {'success': False, 'error': str(e)}\r\n \r\n def list_processes():\r\n-    \"\"\"Lista todos los procesos en ejecución.\"\"\"\r\n+    \"\"\"\r\n+    Lista todos los procesos en ejecución.\r\n+    \r\n+    Returns:\r\n+        dict: Diccionario con el resultado de la lista de procesos\r\n+            - success (bool): Si la operación fue exitosa\r\n+            - processes (list): Lista de procesos con detalles\r\n+            - error (str): Mensaje de error si ocurrió alguno\r\n+    \"\"\"\r\n     try:\r\n         processes = []\r\n         for proc in psutil.process_iter(['pid', 'name', 'username', 'memory_percent']):\r\n             processes.append(proc.info)\r\n@@ -68,17 +117,35 @@\n     except Exception as e:\r\n         return {'success': False, 'error': str(e)}\r\n \r\n def kill_process(pid):\r\n-    \"\"\"Mata un proceso por su PID.\"\"\"\r\n+    \"\"\"\r\n+    Mata un proceso por su PID.\r\n+    \r\n+    Args:\r\n+        pid (int): ID del proceso a matar\r\n+    \r\n+    Returns:\r\n+        dict: Diccionario con el resultado de la operación\r\n+            - success (bool): Si el proceso fue terminado\r\n+            - error (str): Mensaje de error si ocurrió alguno\r\n+    \"\"\"\r\n     try:\r\n         psutil.Process(pid).terminate()\r\n         return {'success': True}\r\n     except Exception as e:\r\n         return {'success': False, 'error': str(e)}\r\n \r\n def list_network_connections():\r\n-    \"\"\"Lista todas las conexiones de red activas.\"\"\"\r\n+    \"\"\"\r\n+    Lista todas las conexiones de red activas.\r\n+    \r\n+    Returns:\r\n+        dict: Diccionario con el resultado de la lista de conexiones\r\n+            - success (bool): Si la operación fue exitosa\r\n+            - connections (list): Lista de conexiones con detalles\r\n+            - error (str): Mensaje de error si ocurrió alguno\r\n+    \"\"\"\r\n     try:\r\n         connections = []\r\n         for conn in psutil.net_connections():\r\n             connections.append({\r\n@@ -91,9 +158,22 @@\n     except Exception as e:\r\n         return {'success': False, 'error': str(e)}\r\n \r\n def modify_registry(key_path, value_name, value_data, value_type='REG_SZ'):\r\n-    \"\"\"Modifica el registro de Windows.\"\"\"\r\n+    \"\"\"\r\n+    Modifica el registro de Windows.\r\n+    \r\n+    Args:\r\n+        key_path (str): Ruta de la clave del registro\r\n+        value_name (str): Nombre del valor a modificar\r\n+        value_data (str/int): Datos del valor a modificar\r\n+        value_type (str): Tipo de valor del registro (por defecto 'REG_SZ')\r\n+    \r\n+    Returns:\r\n+        dict: Diccionario con el resultado de la operación\r\n+            - success (bool): Si la operación fue exitosa\r\n+            - error (str): Mensaje de error si ocurrió alguno\r\n+    \"\"\"\r\n     try:\r\n         reg_types = {\r\n             'REG_SZ': winreg.REG_SZ,\r\n             'REG_DWORD': winreg.REG_DWORD\r\n"
                }
            ],
            "date": 1740260772215,
            "name": "Commit-0",
            "content": "import subprocess\r\nimport os\r\nimport sys\r\nimport ctypes\r\nimport platform\r\nimport psutil\r\nimport winreg\r\nimport requests\r\nimport base64\r\nfrom PIL import ImageGrab\r\nimport io\r\n\r\ndef execute_system_command(command, shell=True):\r\n    \"\"\"Ejecuta un comando del sistema y retorna su salida.\"\"\"\r\n    try:\r\n        result = subprocess.run(command, shell=shell, capture_output=True, text=True)\r\n        return {\r\n            'success': result.returncode == 0,\r\n            'output': result.stdout,\r\n            'error': result.stderr\r\n        }\r\n    except Exception as e:\r\n        return {\r\n            'success': False,\r\n            'output': '',\r\n            'error': str(e)\r\n        }\r\n\r\ndef get_system_info():\r\n    \"\"\"Obtiene información detallada del sistema.\"\"\"\r\n    try:\r\n        info = {\r\n            'platform': platform.system(),\r\n            'platform_release': platform.release(),\r\n            'platform_version': platform.version(),\r\n            'architecture': platform.machine(),\r\n            'hostname': platform.node(),\r\n            'processor': platform.processor(),\r\n            'ram': f\"{psutil.virtual_memory().total / (1024.0 ** 3):.2f} GB\",\r\n            'username': os.getlogin(),\r\n            'is_admin': ctypes.windll.shell32.IsUserAnAdmin() if os.name == 'nt' else os.getuid() == 0\r\n        }\r\n        return {'success': True, 'info': info}\r\n    except Exception as e:\r\n        return {'success': False, 'error': str(e)}\r\n\r\ndef capture_screenshot():\r\n    \"\"\"Captura la pantalla y la devuelve en base64.\"\"\"\r\n    try:\r\n        screenshot = ImageGrab.grab()\r\n        img_byte_arr = io.BytesIO()\r\n        screenshot.save(img_byte_arr, format='PNG')\r\n        img_byte_arr = img_byte_arr.getvalue()\r\n        return {\r\n            'success': True,\r\n            'image': base64.b64encode(img_byte_arr).decode()\r\n        }\r\n    except Exception as e:\r\n        return {'success': False, 'error': str(e)}\r\n\r\ndef list_processes():\r\n    \"\"\"Lista todos los procesos en ejecución.\"\"\"\r\n    try:\r\n        processes = []\r\n        for proc in psutil.process_iter(['pid', 'name', 'username', 'memory_percent']):\r\n            processes.append(proc.info)\r\n        return {'success': True, 'processes': processes}\r\n    except Exception as e:\r\n        return {'success': False, 'error': str(e)}\r\n\r\ndef kill_process(pid):\r\n    \"\"\"Mata un proceso por su PID.\"\"\"\r\n    try:\r\n        psutil.Process(pid).terminate()\r\n        return {'success': True}\r\n    except Exception as e:\r\n        return {'success': False, 'error': str(e)}\r\n\r\ndef list_network_connections():\r\n    \"\"\"Lista todas las conexiones de red activas.\"\"\"\r\n    try:\r\n        connections = []\r\n        for conn in psutil.net_connections():\r\n            connections.append({\r\n                'local_addr': conn.laddr,\r\n                'remote_addr': conn.raddr,\r\n                'status': conn.status,\r\n                'pid': conn.pid\r\n            })\r\n        return {'success': True, 'connections': connections}\r\n    except Exception as e:\r\n        return {'success': False, 'error': str(e)}\r\n\r\ndef modify_registry(key_path, value_name, value_data, value_type='REG_SZ'):\r\n    \"\"\"Modifica el registro de Windows.\"\"\"\r\n    try:\r\n        reg_types = {\r\n            'REG_SZ': winreg.REG_SZ,\r\n            'REG_DWORD': winreg.REG_DWORD\r\n        }\r\n        \r\n        root = winreg.HKEY_CURRENT_USER\r\n        key = winreg.CreateKey(root, key_path)\r\n        winreg.SetValueEx(key, value_name, 0, reg_types[value_type], value_data)\r\n        winreg.CloseKey(key)\r\n        return {'success': True}\r\n    except Exception as e:\r\n        return {'success': False, 'error': str(e)}\r\n"
        }
    ]
}