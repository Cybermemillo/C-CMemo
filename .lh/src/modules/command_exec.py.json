{
    "sourceFile": "src/modules/command_exec.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740262806782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740266558334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,4 +150,20 @@\n                     \r\n         except Exception as e:\r\n             logging.error(f\"Error ejecutando script: {e}\")\r\n             return -1, \"\", str(e)\r\n+\r\n+\"\"\"\r\n+Módulo para ejecución avanzada de comandos\r\n+\"\"\"\r\n+\r\n+class CommandExec:\r\n+    def __init__(self):\r\n+        self.last_output = None\r\n+        \r\n+    def execute_with_output(self, command):\r\n+        \"\"\"Ejecuta comando y captura salida\"\"\"\r\n+        pass\r\n+        \r\n+    def execute_with_privileges(self, command):\r\n+        \"\"\"Ejecuta comando con privilegios elevados\"\"\"\r\n+        pass\r\n"
                }
            ],
            "date": 1740262806782,
            "name": "Commit-0",
            "content": "\"\"\"\r\nMódulo de ejecución de comandos.\r\nPermite ejecutar comandos del sistema operativo y capturar su salida.\r\n\"\"\"\r\n\r\nimport subprocess\r\nimport shlex\r\nimport os\r\nimport logging\r\nfrom typing import Tuple, Optional\r\nimport platform\r\nimport tempfile\r\nfrom pathlib import Path\r\n\r\nclass CommandExecutor:\r\n    def __init__(self):\r\n        \"\"\"Inicializa el ejecutor de comandos.\"\"\"\r\n        self.is_windows = platform.system().lower() == 'windows'\r\n        self.default_shell = 'cmd.exe' if self.is_windows else '/bin/bash'\r\n        self.powershell_path = self._find_powershell()\r\n\r\n    def _find_powershell(self) -> str:\r\n        \"\"\"Localiza la ruta de PowerShell en el sistema.\"\"\"\r\n        if not self.is_windows:\r\n            return \"\"\r\n            \r\n        possible_paths = [\r\n            r\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\",\r\n            r\"C:\\Windows\\System32\\PowerShell\\v1.0\\powershell.exe\",\r\n            r\"C:\\Program Files\\PowerShell\\7\\pwsh.exe\"  # PowerShell Core\r\n        ]\r\n        \r\n        for path in possible_paths:\r\n            if os.path.exists(path):\r\n                return path\r\n        return \"powershell.exe\"  # fallback to PATH lookup\r\n\r\n    def execute_cmd(self, command: str, timeout: int = 30) -> Tuple[int, str, str]:\r\n        \"\"\"\r\n        Ejecuta un comando usando CMD.exe.\r\n        \r\n        Args:\r\n            command: Comando a ejecutar\r\n            timeout: Tiempo máximo de ejecución en segundos\r\n            \r\n        Returns:\r\n            Tupla con (código_retorno, stdout, stderr)\r\n        \"\"\"\r\n        try:\r\n            if not self.is_windows:\r\n                raise RuntimeError(\"CMD.exe solo está disponible en Windows\")\r\n                \r\n            process = subprocess.Popen(\r\n                ['cmd.exe', '/c', command],\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.PIPE,\r\n                shell=False,\r\n                universal_newlines=True\r\n            )\r\n            \r\n            stdout, stderr = process.communicate(timeout=timeout)\r\n            return process.returncode, stdout, stderr\r\n            \r\n        except subprocess.TimeoutExpired:\r\n            process.kill()\r\n            return -1, \"\", \"Command timed out\"\r\n        except Exception as e:\r\n            logging.error(f\"Error ejecutando comando CMD: {e}\")\r\n            return -1, \"\", str(e)\r\n\r\n    def execute_powershell(self, \r\n                          command: str, \r\n                          timeout: int = 30,\r\n                          encoded: bool = False) -> Tuple[int, str, str]:\r\n        \"\"\"\r\n        Ejecuta un comando usando PowerShell.\r\n        \r\n        Args:\r\n            command: Comando o script a ejecutar\r\n            timeout: Tiempo máximo de ejecución en segundos\r\n            encoded: Si True, codifica el comando en Base64\r\n            \r\n        Returns:\r\n            Tupla con (código_retorno, stdout, stderr)\r\n        \"\"\"\r\n        try:\r\n            if not self.is_windows:\r\n                raise RuntimeError(\"PowerShell solo está disponible en Windows\")\r\n\r\n            if encoded:\r\n                # Codificar comando en Base64 para evitar problemas con caracteres especiales\r\n                encoded_command = command.encode('utf-16le')\r\n                command = f'-EncodedCommand {encoded_command.hex()}'\r\n            \r\n            process = subprocess.Popen(\r\n                [self.powershell_path, '-NoProfile', '-NonInteractive', '-Command', command],\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.PIPE,\r\n                shell=False,\r\n                universal_newlines=True\r\n            )\r\n            \r\n            stdout, stderr = process.communicate(timeout=timeout)\r\n            return process.returncode, stdout, stderr\r\n            \r\n        except subprocess.TimeoutExpired:\r\n            process.kill()\r\n            return -1, \"\", \"Command timed out\"\r\n        except Exception as e:\r\n            logging.error(f\"Error ejecutando comando PowerShell: {e}\")\r\n            return -1, \"\", str(e)\r\n\r\n    def execute_script(self, script_content: str, script_type: str = \"ps1\") -> Tuple[int, str, str]:\r\n        \"\"\"\r\n        Ejecuta un script desde una cadena de texto.\r\n        \r\n        Args:\r\n            script_content: Contenido del script\r\n            script_type: Tipo de script (ps1, bat, vbs)\r\n            \r\n        Returns:\r\n            Tupla con (código_retorno, stdout, stderr)\r\n        \"\"\"\r\n        try:\r\n            # Crear archivo temporal\r\n            with tempfile.NamedTemporaryFile(\r\n                mode='w',\r\n                suffix=f'.{script_type}',\r\n                delete=False,\r\n                encoding='utf-8'\r\n            ) as temp_file:\r\n                temp_file.write(script_content)\r\n                temp_path = temp_file.name\r\n\r\n            try:\r\n                if script_type == \"ps1\":\r\n                    return self.execute_powershell(f\". '{temp_path}'\")\r\n                elif script_type == \"bat\":\r\n                    return self.execute_cmd(temp_path)\r\n                elif script_type == \"vbs\":\r\n                    return self.execute_cmd(f'cscript //NoLogo \"{temp_path}\"')\r\n                else:\r\n                    raise ValueError(f\"Tipo de script no soportado: {script_type}\")\r\n            finally:\r\n                # Limpiar archivo temporal\r\n                try:\r\n                    os.unlink(temp_path)\r\n                except:\r\n                    pass\r\n                    \r\n        except Exception as e:\r\n            logging.error(f\"Error ejecutando script: {e}\")\r\n            return -1, \"\", str(e)\r\n"
        }
    ]
}